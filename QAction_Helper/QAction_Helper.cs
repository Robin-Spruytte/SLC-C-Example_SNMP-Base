// <auto-generated>This is auto-generated code by DIS. Do not modify.</auto-generated>
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Skyline.DataMiner.Scripting
{
public static class Parameter
{
	/// <summary>PID: 92 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int sysuptimegroupresultafterretries_92 = 92;
	/// <summary>PID: 92 | Type: read</summary>
	public const int sysuptimegroupresultafterretries = 92;
	/// <summary>PID: 95 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int sysuptimebuffer_95 = 95;
	/// <summary>PID: 95 | Type: read</summary>
	public const int sysuptimebuffer = 95;
	/// <summary>PID: 100 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int sysuptime_100 = 100;
	/// <summary>PID: 100 | Type: read</summary>
	public const int sysuptime = 100;
	/// <summary>PID: 101 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int sysname_101 = 101;
	/// <summary>PID: 101 | Type: read</summary>
	public const int sysname = 101;
	/// <summary>PID: 103 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int syscontact_103 = 103;
	/// <summary>PID: 103 | Type: read</summary>
	public const int syscontact = 103;
	/// <summary>PID: 105 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int syslocation_105 = 105;
	/// <summary>PID: 105 | Type: read</summary>
	public const int syslocation = 105;
	/// <summary>PID: 107 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int sysobjectid_107 = 107;
	/// <summary>PID: 107 | Type: read</summary>
	public const int sysobjectid = 107;
	/// <summary>PID: 108 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int sysdescr_108 = 108;
	/// <summary>PID: 108 | Type: read</summary>
	public const int sysdescr = 108;
	/// <summary>PID: 992 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int iftablegroupresultafterretries_992 = 992;
	/// <summary>PID: 992 | Type: read</summary>
	public const int iftablegroupresultafterretries = 992;
	/// <summary>PID: 995 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int iftablesnmpagentrestartflag_995 = 995;
	/// <summary>PID: 995 | Type: read</summary>
	public const int iftablesnmpagentrestartflag = 995;
	/// <summary>PID: 999 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int iftablesetinstance_999 = 999;
	/// <summary>PID: 999 | Type: read</summary>
	public const int iftablesetinstance = 999;
	/// <summary>PID: 1092 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int ifxtablegroupresultafterretries_1092 = 1092;
	/// <summary>PID: 1092 | Type: read</summary>
	public const int ifxtablegroupresultafterretries = 1092;
	/// <summary>PID: 1095 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int ifxtablesnmpagentrestartflag_1095 = 1095;
	/// <summary>PID: 1095 | Type: read</summary>
	public const int ifxtablesnmpagentrestartflag = 1095;
	/// <summary>PID: 1099 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int ifxtablesetinstance_1099 = 1099;
	/// <summary>PID: 1099 | Type: read</summary>
	public const int ifxtablesetinstance = 1099;
	/// <summary>PID: 1192 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int interfacesratecalculationsmethod_1192 = 1192;
	/// <summary>PID: 1192 | Type: read</summary>
	public const int interfacesratecalculationsmethod = 1192;
	public class Write
	{
		/// <summary>PID: 102 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int sysname_102 = 102;
		/// <summary>PID: 102 | Type: write</summary>
		public const int sysname = 102;
		/// <summary>PID: 104 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int syscontact_104 = 104;
		/// <summary>PID: 104 | Type: write</summary>
		public const int syscontact = 104;
		/// <summary>PID: 106 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int syslocation_106 = 106;
		/// <summary>PID: 106 | Type: write</summary>
		public const int syslocation = 106;
		/// <summary>PID: 1057 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int iftableifadminstatus_1057 = 1057;
		/// <summary>PID: 1057 | Type: write</summary>
		public const int iftableifadminstatus = 1057;
		/// <summary>PID: 1155 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int ifxtableiflinkupdowntrapenable_1155 = 1155;
		/// <summary>PID: 1155 | Type: write</summary>
		public const int ifxtableiflinkupdowntrapenable = 1155;
		/// <summary>PID: 1157 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int ifxtableifpromiscuousmode_1157 = 1157;
		/// <summary>PID: 1157 | Type: write</summary>
		public const int ifxtableifpromiscuousmode = 1157;
		/// <summary>PID: 1159 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int ifxtableifalias_1159 = 1159;
		/// <summary>PID: 1159 | Type: write</summary>
		public const int ifxtableifalias = 1159;
		/// <summary>PID: 1190 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int interfacesrawtablespagebutton_1190 = 1190;
		/// <summary>PID: 1190 | Type: write</summary>
		public const int interfacesrawtablespagebutton = 1190;
		/// <summary>PID: 1193 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int interfacesratecalculationsmethod_1193 = 1193;
		/// <summary>PID: 1193 | Type: write</summary>
		public const int interfacesratecalculationsmethod = 1193;
		/// <summary>PID: 1257 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int interfacesadminstatus_1257 = 1257;
		/// <summary>PID: 1257 | Type: write</summary>
		public const int interfacesadminstatus = 1257;
		/// <summary>PID: 1275 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int interfacespromiscuousmode_1275 = 1275;
		/// <summary>PID: 1275 | Type: write</summary>
		public const int interfacespromiscuousmode = 1275;
		/// <summary>PID: 1277 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int interfacesalias_1277 = 1277;
		/// <summary>PID: 1277 | Type: write</summary>
		public const int interfacesalias = 1277;
		/// <summary>PID: 1279 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int interfaceslinkupdowntrapenable_1279 = 1279;
		/// <summary>PID: 1279 | Type: write</summary>
		public const int interfaceslinkupdowntrapenable = 1279;
	}
	public class Iftable
	{
		/// <summary>PID: 1000</summary>
		public const int tablePid = 1000;
		/// <summary>IDX: 0</summary>
		public const int indexColumn = 0;
		/// <summary>PID: 1001</summary>
		public const int indexColumnPid = 1001;
		public class Pid
		{
			/// <summary>PID: 1001 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifindex_1001 = 1001;
			/// <summary>PID: 1001 | Type: read</summary>
			public const int iftableifindex = 1001;
			/// <summary>PID: 1002 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifdescr_1002 = 1002;
			/// <summary>PID: 1002 | Type: read</summary>
			public const int iftableifdescr = 1002;
			/// <summary>PID: 1003 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableiftype_1003 = 1003;
			/// <summary>PID: 1003 | Type: read</summary>
			public const int iftableiftype = 1003;
			/// <summary>PID: 1004 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifmtu_1004 = 1004;
			/// <summary>PID: 1004 | Type: read</summary>
			public const int iftableifmtu = 1004;
			/// <summary>PID: 1005 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifspeed_1005 = 1005;
			/// <summary>PID: 1005 | Type: read</summary>
			public const int iftableifspeed = 1005;
			/// <summary>PID: 1006 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifphysaddress_1006 = 1006;
			/// <summary>PID: 1006 | Type: read</summary>
			public const int iftableifphysaddress = 1006;
			/// <summary>PID: 1007 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifadminstatus_1007 = 1007;
			/// <summary>PID: 1007 | Type: read</summary>
			public const int iftableifadminstatus = 1007;
			/// <summary>PID: 1008 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifoperstatus_1008 = 1008;
			/// <summary>PID: 1008 | Type: read</summary>
			public const int iftableifoperstatus = 1008;
			/// <summary>PID: 1009 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableiflastchange_1009 = 1009;
			/// <summary>PID: 1009 | Type: read</summary>
			public const int iftableiflastchange = 1009;
			/// <summary>PID: 1010 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifinoctets_1010 = 1010;
			/// <summary>PID: 1010 | Type: read</summary>
			public const int iftableifinoctets = 1010;
			/// <summary>PID: 1011 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifinucastpkts_1011 = 1011;
			/// <summary>PID: 1011 | Type: read</summary>
			public const int iftableifinucastpkts = 1011;
			/// <summary>PID: 1012 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifindiscards_1012 = 1012;
			/// <summary>PID: 1012 | Type: read</summary>
			public const int iftableifindiscards = 1012;
			/// <summary>PID: 1013 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifinerrors_1013 = 1013;
			/// <summary>PID: 1013 | Type: read</summary>
			public const int iftableifinerrors = 1013;
			/// <summary>PID: 1014 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifinunknownprotos_1014 = 1014;
			/// <summary>PID: 1014 | Type: read</summary>
			public const int iftableifinunknownprotos = 1014;
			/// <summary>PID: 1015 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifoutoctets_1015 = 1015;
			/// <summary>PID: 1015 | Type: read</summary>
			public const int iftableifoutoctets = 1015;
			/// <summary>PID: 1016 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifoutucastpkts_1016 = 1016;
			/// <summary>PID: 1016 | Type: read</summary>
			public const int iftableifoutucastpkts = 1016;
			/// <summary>PID: 1017 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifoutdiscards_1017 = 1017;
			/// <summary>PID: 1017 | Type: read</summary>
			public const int iftableifoutdiscards = 1017;
			/// <summary>PID: 1018 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifouterrors_1018 = 1018;
			/// <summary>PID: 1018 | Type: read</summary>
			public const int iftableifouterrors = 1018;
			/// <summary>PID: 1019 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifinbitrate_1019 = 1019;
			/// <summary>PID: 1019 | Type: read</summary>
			public const int iftableifinbitrate = 1019;
			/// <summary>PID: 1020 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifoutbitrate_1020 = 1020;
			/// <summary>PID: 1020 | Type: read</summary>
			public const int iftableifoutbitrate = 1020;
			/// <summary>PID: 1021 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifbandwidthutilization_1021 = 1021;
			/// <summary>PID: 1021 | Type: read</summary>
			public const int iftableifbandwidthutilization = 1021;
			/// <summary>PID: 1022 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifratedata_1022 = 1022;
			/// <summary>PID: 1022 | Type: read</summary>
			public const int iftableifratedata = 1022;
			public class Write
			{
			}
		}
		public class Idx
		{
			/// <summary>IDX: 0 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifindex_1001 = 0;
			/// <summary>IDX: 0 | Type: read</summary>
			public const int iftableifindex = 0;
			/// <summary>IDX: 1 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifdescr_1002 = 1;
			/// <summary>IDX: 1 | Type: read</summary>
			public const int iftableifdescr = 1;
			/// <summary>IDX: 2 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableiftype_1003 = 2;
			/// <summary>IDX: 2 | Type: read</summary>
			public const int iftableiftype = 2;
			/// <summary>IDX: 3 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifmtu_1004 = 3;
			/// <summary>IDX: 3 | Type: read</summary>
			public const int iftableifmtu = 3;
			/// <summary>IDX: 4 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifspeed_1005 = 4;
			/// <summary>IDX: 4 | Type: read</summary>
			public const int iftableifspeed = 4;
			/// <summary>IDX: 5 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifphysaddress_1006 = 5;
			/// <summary>IDX: 5 | Type: read</summary>
			public const int iftableifphysaddress = 5;
			/// <summary>IDX: 6 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifadminstatus_1007 = 6;
			/// <summary>IDX: 6 | Type: read</summary>
			public const int iftableifadminstatus = 6;
			/// <summary>IDX: 7 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifoperstatus_1008 = 7;
			/// <summary>IDX: 7 | Type: read</summary>
			public const int iftableifoperstatus = 7;
			/// <summary>IDX: 8 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableiflastchange_1009 = 8;
			/// <summary>IDX: 8 | Type: read</summary>
			public const int iftableiflastchange = 8;
			/// <summary>IDX: 9 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifinoctets_1010 = 9;
			/// <summary>IDX: 9 | Type: read</summary>
			public const int iftableifinoctets = 9;
			/// <summary>IDX: 10 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifinucastpkts_1011 = 10;
			/// <summary>IDX: 10 | Type: read</summary>
			public const int iftableifinucastpkts = 10;
			/// <summary>IDX: 11 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifindiscards_1012 = 11;
			/// <summary>IDX: 11 | Type: read</summary>
			public const int iftableifindiscards = 11;
			/// <summary>IDX: 12 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifinerrors_1013 = 12;
			/// <summary>IDX: 12 | Type: read</summary>
			public const int iftableifinerrors = 12;
			/// <summary>IDX: 13 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifinunknownprotos_1014 = 13;
			/// <summary>IDX: 13 | Type: read</summary>
			public const int iftableifinunknownprotos = 13;
			/// <summary>IDX: 14 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifoutoctets_1015 = 14;
			/// <summary>IDX: 14 | Type: read</summary>
			public const int iftableifoutoctets = 14;
			/// <summary>IDX: 15 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifoutucastpkts_1016 = 15;
			/// <summary>IDX: 15 | Type: read</summary>
			public const int iftableifoutucastpkts = 15;
			/// <summary>IDX: 16 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifoutdiscards_1017 = 16;
			/// <summary>IDX: 16 | Type: read</summary>
			public const int iftableifoutdiscards = 16;
			/// <summary>IDX: 17 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifouterrors_1018 = 17;
			/// <summary>IDX: 17 | Type: read</summary>
			public const int iftableifouterrors = 17;
			/// <summary>IDX: 18 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifinbitrate_1019 = 18;
			/// <summary>IDX: 18 | Type: read</summary>
			public const int iftableifinbitrate = 18;
			/// <summary>IDX: 19 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifoutbitrate_1020 = 19;
			/// <summary>IDX: 19 | Type: read</summary>
			public const int iftableifoutbitrate = 19;
			/// <summary>IDX: 20 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifbandwidthutilization_1021 = 20;
			/// <summary>IDX: 20 | Type: read</summary>
			public const int iftableifbandwidthutilization = 20;
			/// <summary>IDX: 21 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int iftableifratedata_1022 = 21;
			/// <summary>IDX: 21 | Type: read</summary>
			public const int iftableifratedata = 21;
		}
	}
	public class Ifxtable
	{
		/// <summary>PID: 1100</summary>
		public const int tablePid = 1100;
		/// <summary>IDX: 0</summary>
		public const int indexColumn = 0;
		/// <summary>PID: 1101</summary>
		public const int indexColumnPid = 1101;
		public class Pid
		{
			/// <summary>PID: 1101 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifindex_1101 = 1101;
			/// <summary>PID: 1101 | Type: read</summary>
			public const int ifxtableifindex = 1101;
			/// <summary>PID: 1102 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifname_1102 = 1102;
			/// <summary>PID: 1102 | Type: read</summary>
			public const int ifxtableifname = 1102;
			/// <summary>PID: 1103 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifinmulticastpkts_1103 = 1103;
			/// <summary>PID: 1103 | Type: read</summary>
			public const int ifxtableifinmulticastpkts = 1103;
			/// <summary>PID: 1104 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifinbroadcastpkts_1104 = 1104;
			/// <summary>PID: 1104 | Type: read</summary>
			public const int ifxtableifinbroadcastpkts = 1104;
			/// <summary>PID: 1105 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifoutmulticastpkts_1105 = 1105;
			/// <summary>PID: 1105 | Type: read</summary>
			public const int ifxtableifoutmulticastpkts = 1105;
			/// <summary>PID: 1106 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifoutbroadcastpkts_1106 = 1106;
			/// <summary>PID: 1106 | Type: read</summary>
			public const int ifxtableifoutbroadcastpkts = 1106;
			/// <summary>PID: 1107 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcinoctets_1107 = 1107;
			/// <summary>PID: 1107 | Type: read</summary>
			public const int ifxtableifhcinoctets = 1107;
			/// <summary>PID: 1108 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcinucastpkts_1108 = 1108;
			/// <summary>PID: 1108 | Type: read</summary>
			public const int ifxtableifhcinucastpkts = 1108;
			/// <summary>PID: 1109 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcinmulticastpkts_1109 = 1109;
			/// <summary>PID: 1109 | Type: read</summary>
			public const int ifxtableifhcinmulticastpkts = 1109;
			/// <summary>PID: 1110 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcinbroadcastpkts_1110 = 1110;
			/// <summary>PID: 1110 | Type: read</summary>
			public const int ifxtableifhcinbroadcastpkts = 1110;
			/// <summary>PID: 1111 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcoutoctets_1111 = 1111;
			/// <summary>PID: 1111 | Type: read</summary>
			public const int ifxtableifhcoutoctets = 1111;
			/// <summary>PID: 1112 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcoutucastpkts_1112 = 1112;
			/// <summary>PID: 1112 | Type: read</summary>
			public const int ifxtableifhcoutucastpkts = 1112;
			/// <summary>PID: 1113 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcoutmulticastpkts_1113 = 1113;
			/// <summary>PID: 1113 | Type: read</summary>
			public const int ifxtableifhcoutmulticastpkts = 1113;
			/// <summary>PID: 1114 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcoutbroadcastpkts_1114 = 1114;
			/// <summary>PID: 1114 | Type: read</summary>
			public const int ifxtableifhcoutbroadcastpkts = 1114;
			/// <summary>PID: 1115 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableiflinkupdowntrapenable_1115 = 1115;
			/// <summary>PID: 1115 | Type: read</summary>
			public const int ifxtableiflinkupdowntrapenable = 1115;
			/// <summary>PID: 1116 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhighspeed_1116 = 1116;
			/// <summary>PID: 1116 | Type: read</summary>
			public const int ifxtableifhighspeed = 1116;
			/// <summary>PID: 1117 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifpromiscuousmode_1117 = 1117;
			/// <summary>PID: 1117 | Type: read</summary>
			public const int ifxtableifpromiscuousmode = 1117;
			/// <summary>PID: 1118 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifconnectorpresent_1118 = 1118;
			/// <summary>PID: 1118 | Type: read</summary>
			public const int ifxtableifconnectorpresent = 1118;
			/// <summary>PID: 1119 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifalias_1119 = 1119;
			/// <summary>PID: 1119 | Type: read</summary>
			public const int ifxtableifalias = 1119;
			/// <summary>PID: 1120 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifcounterdiscontinuitytime_1120 = 1120;
			/// <summary>PID: 1120 | Type: read</summary>
			public const int ifxtableifcounterdiscontinuitytime = 1120;
			/// <summary>PID: 1121 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifinbitrate_1121 = 1121;
			/// <summary>PID: 1121 | Type: read</summary>
			public const int ifxtableifinbitrate = 1121;
			/// <summary>PID: 1122 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifoutbitrate_1122 = 1122;
			/// <summary>PID: 1122 | Type: read</summary>
			public const int ifxtableifoutbitrate = 1122;
			/// <summary>PID: 1123 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifbandwidthutilization_1123 = 1123;
			/// <summary>PID: 1123 | Type: read</summary>
			public const int ifxtableifbandwidthutilization = 1123;
			/// <summary>PID: 1124 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifratedata_1124 = 1124;
			/// <summary>PID: 1124 | Type: read</summary>
			public const int ifxtableifratedata = 1124;
			public class Write
			{
			}
		}
		public class Idx
		{
			/// <summary>IDX: 0 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifindex_1101 = 0;
			/// <summary>IDX: 0 | Type: read</summary>
			public const int ifxtableifindex = 0;
			/// <summary>IDX: 1 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifname_1102 = 1;
			/// <summary>IDX: 1 | Type: read</summary>
			public const int ifxtableifname = 1;
			/// <summary>IDX: 2 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifinmulticastpkts_1103 = 2;
			/// <summary>IDX: 2 | Type: read</summary>
			public const int ifxtableifinmulticastpkts = 2;
			/// <summary>IDX: 3 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifinbroadcastpkts_1104 = 3;
			/// <summary>IDX: 3 | Type: read</summary>
			public const int ifxtableifinbroadcastpkts = 3;
			/// <summary>IDX: 4 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifoutmulticastpkts_1105 = 4;
			/// <summary>IDX: 4 | Type: read</summary>
			public const int ifxtableifoutmulticastpkts = 4;
			/// <summary>IDX: 5 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifoutbroadcastpkts_1106 = 5;
			/// <summary>IDX: 5 | Type: read</summary>
			public const int ifxtableifoutbroadcastpkts = 5;
			/// <summary>IDX: 6 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcinoctets_1107 = 6;
			/// <summary>IDX: 6 | Type: read</summary>
			public const int ifxtableifhcinoctets = 6;
			/// <summary>IDX: 7 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcinucastpkts_1108 = 7;
			/// <summary>IDX: 7 | Type: read</summary>
			public const int ifxtableifhcinucastpkts = 7;
			/// <summary>IDX: 8 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcinmulticastpkts_1109 = 8;
			/// <summary>IDX: 8 | Type: read</summary>
			public const int ifxtableifhcinmulticastpkts = 8;
			/// <summary>IDX: 9 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcinbroadcastpkts_1110 = 9;
			/// <summary>IDX: 9 | Type: read</summary>
			public const int ifxtableifhcinbroadcastpkts = 9;
			/// <summary>IDX: 10 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcoutoctets_1111 = 10;
			/// <summary>IDX: 10 | Type: read</summary>
			public const int ifxtableifhcoutoctets = 10;
			/// <summary>IDX: 11 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcoutucastpkts_1112 = 11;
			/// <summary>IDX: 11 | Type: read</summary>
			public const int ifxtableifhcoutucastpkts = 11;
			/// <summary>IDX: 12 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcoutmulticastpkts_1113 = 12;
			/// <summary>IDX: 12 | Type: read</summary>
			public const int ifxtableifhcoutmulticastpkts = 12;
			/// <summary>IDX: 13 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhcoutbroadcastpkts_1114 = 13;
			/// <summary>IDX: 13 | Type: read</summary>
			public const int ifxtableifhcoutbroadcastpkts = 13;
			/// <summary>IDX: 14 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableiflinkupdowntrapenable_1115 = 14;
			/// <summary>IDX: 14 | Type: read</summary>
			public const int ifxtableiflinkupdowntrapenable = 14;
			/// <summary>IDX: 15 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifhighspeed_1116 = 15;
			/// <summary>IDX: 15 | Type: read</summary>
			public const int ifxtableifhighspeed = 15;
			/// <summary>IDX: 16 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifpromiscuousmode_1117 = 16;
			/// <summary>IDX: 16 | Type: read</summary>
			public const int ifxtableifpromiscuousmode = 16;
			/// <summary>IDX: 17 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifconnectorpresent_1118 = 17;
			/// <summary>IDX: 17 | Type: read</summary>
			public const int ifxtableifconnectorpresent = 17;
			/// <summary>IDX: 18 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifalias_1119 = 18;
			/// <summary>IDX: 18 | Type: read</summary>
			public const int ifxtableifalias = 18;
			/// <summary>IDX: 19 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifcounterdiscontinuitytime_1120 = 19;
			/// <summary>IDX: 19 | Type: read</summary>
			public const int ifxtableifcounterdiscontinuitytime = 19;
			/// <summary>IDX: 20 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifinbitrate_1121 = 20;
			/// <summary>IDX: 20 | Type: read</summary>
			public const int ifxtableifinbitrate = 20;
			/// <summary>IDX: 21 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifoutbitrate_1122 = 21;
			/// <summary>IDX: 21 | Type: read</summary>
			public const int ifxtableifoutbitrate = 21;
			/// <summary>IDX: 22 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifbandwidthutilization_1123 = 22;
			/// <summary>IDX: 22 | Type: read</summary>
			public const int ifxtableifbandwidthutilization = 22;
			/// <summary>IDX: 23 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int ifxtableifratedata_1124 = 23;
			/// <summary>IDX: 23 | Type: read</summary>
			public const int ifxtableifratedata = 23;
		}
	}
	public class Interfaces
	{
		/// <summary>PID: 1200</summary>
		public const int tablePid = 1200;
		/// <summary>IDX: 0</summary>
		public const int indexColumn = 0;
		/// <summary>PID: 1201</summary>
		public const int indexColumnPid = 1201;
		public class Pid
		{
			/// <summary>PID: 1201 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesindex_1201 = 1201;
			/// <summary>PID: 1201 | Type: read</summary>
			public const int interfacesindex = 1201;
			/// <summary>PID: 1202 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesdescr_1202 = 1202;
			/// <summary>PID: 1202 | Type: read</summary>
			public const int interfacesdescr = 1202;
			/// <summary>PID: 1203 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacestype_1203 = 1203;
			/// <summary>PID: 1203 | Type: read</summary>
			public const int interfacestype = 1203;
			/// <summary>PID: 1204 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesmtu_1204 = 1204;
			/// <summary>PID: 1204 | Type: read</summary>
			public const int interfacesmtu = 1204;
			/// <summary>PID: 1205 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesspeed_1205 = 1205;
			/// <summary>PID: 1205 | Type: read</summary>
			public const int interfacesspeed = 1205;
			/// <summary>PID: 1206 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesphysaddress_1206 = 1206;
			/// <summary>PID: 1206 | Type: read</summary>
			public const int interfacesphysaddress = 1206;
			/// <summary>PID: 1207 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesadminstatus_1207 = 1207;
			/// <summary>PID: 1207 | Type: read</summary>
			public const int interfacesadminstatus = 1207;
			/// <summary>PID: 1208 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesoperstatus_1208 = 1208;
			/// <summary>PID: 1208 | Type: read</summary>
			public const int interfacesoperstatus = 1208;
			/// <summary>PID: 1209 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfaceslastchange_1209 = 1209;
			/// <summary>PID: 1209 | Type: read</summary>
			public const int interfaceslastchange = 1209;
			/// <summary>PID: 1210 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesinoctets_1210 = 1210;
			/// <summary>PID: 1210 | Type: read</summary>
			public const int interfacesinoctets = 1210;
			/// <summary>PID: 1211 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesinucastpkts_1211 = 1211;
			/// <summary>PID: 1211 | Type: read</summary>
			public const int interfacesinucastpkts = 1211;
			/// <summary>PID: 1212 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesindiscards_1212 = 1212;
			/// <summary>PID: 1212 | Type: read</summary>
			public const int interfacesindiscards = 1212;
			/// <summary>PID: 1213 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesinerrors_1213 = 1213;
			/// <summary>PID: 1213 | Type: read</summary>
			public const int interfacesinerrors = 1213;
			/// <summary>PID: 1214 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesinunknownprotos_1214 = 1214;
			/// <summary>PID: 1214 | Type: read</summary>
			public const int interfacesinunknownprotos = 1214;
			/// <summary>PID: 1215 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesoutoctets_1215 = 1215;
			/// <summary>PID: 1215 | Type: read</summary>
			public const int interfacesoutoctets = 1215;
			/// <summary>PID: 1216 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesoutucastpkts_1216 = 1216;
			/// <summary>PID: 1216 | Type: read</summary>
			public const int interfacesoutucastpkts = 1216;
			/// <summary>PID: 1217 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesoutdiscards_1217 = 1217;
			/// <summary>PID: 1217 | Type: read</summary>
			public const int interfacesoutdiscards = 1217;
			/// <summary>PID: 1218 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesouterrors_1218 = 1218;
			/// <summary>PID: 1218 | Type: read</summary>
			public const int interfacesouterrors = 1218;
			/// <summary>PID: 1219 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesinbitrate_1219 = 1219;
			/// <summary>PID: 1219 | Type: read</summary>
			public const int interfacesinbitrate = 1219;
			/// <summary>PID: 1220 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesoutbitrate_1220 = 1220;
			/// <summary>PID: 1220 | Type: read</summary>
			public const int interfacesoutbitrate = 1220;
			/// <summary>PID: 1221 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesinmulticastpkts_1221 = 1221;
			/// <summary>PID: 1221 | Type: read</summary>
			public const int interfacesinmulticastpkts = 1221;
			/// <summary>PID: 1222 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesinbroadcastpkts_1222 = 1222;
			/// <summary>PID: 1222 | Type: read</summary>
			public const int interfacesinbroadcastpkts = 1222;
			/// <summary>PID: 1223 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesoutmulticastpkts_1223 = 1223;
			/// <summary>PID: 1223 | Type: read</summary>
			public const int interfacesoutmulticastpkts = 1223;
			/// <summary>PID: 1224 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesoutbroadcastpkts_1224 = 1224;
			/// <summary>PID: 1224 | Type: read</summary>
			public const int interfacesoutbroadcastpkts = 1224;
			/// <summary>PID: 1225 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacespromiscuousmode_1225 = 1225;
			/// <summary>PID: 1225 | Type: read</summary>
			public const int interfacespromiscuousmode = 1225;
			/// <summary>PID: 1226 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesphysicalconnector_1226 = 1226;
			/// <summary>PID: 1226 | Type: read</summary>
			public const int interfacesphysicalconnector = 1226;
			/// <summary>PID: 1227 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesalias_1227 = 1227;
			/// <summary>PID: 1227 | Type: read</summary>
			public const int interfacesalias = 1227;
			/// <summary>PID: 1228 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacescounterdiscontinuitytime_1228 = 1228;
			/// <summary>PID: 1228 | Type: read</summary>
			public const int interfacescounterdiscontinuitytime = 1228;
			/// <summary>PID: 1229 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfaceslinkupdowntrapenable_1229 = 1229;
			/// <summary>PID: 1229 | Type: read</summary>
			public const int interfaceslinkupdowntrapenable = 1229;
			/// <summary>PID: 1230 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesbandwidthutilization_1230 = 1230;
			/// <summary>PID: 1230 | Type: read</summary>
			public const int interfacesbandwidthutilization = 1230;
			/// <summary>PID: 1231 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesduplexstatus_1231 = 1231;
			/// <summary>PID: 1231 | Type: read</summary>
			public const int interfacesduplexstatus = 1231;
			/// <summary>PID: 1199 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesdisplaykey_1199 = 1199;
			/// <summary>PID: 1199 | Type: read</summary>
			public const int interfacesdisplaykey = 1199;
			public class Write
			{
			}
		}
		public class Idx
		{
			/// <summary>IDX: 0 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesindex_1201 = 0;
			/// <summary>IDX: 0 | Type: read</summary>
			public const int interfacesindex = 0;
			/// <summary>IDX: 1 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesdescr_1202 = 1;
			/// <summary>IDX: 1 | Type: read</summary>
			public const int interfacesdescr = 1;
			/// <summary>IDX: 2 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacestype_1203 = 2;
			/// <summary>IDX: 2 | Type: read</summary>
			public const int interfacestype = 2;
			/// <summary>IDX: 3 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesmtu_1204 = 3;
			/// <summary>IDX: 3 | Type: read</summary>
			public const int interfacesmtu = 3;
			/// <summary>IDX: 4 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesspeed_1205 = 4;
			/// <summary>IDX: 4 | Type: read</summary>
			public const int interfacesspeed = 4;
			/// <summary>IDX: 5 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesphysaddress_1206 = 5;
			/// <summary>IDX: 5 | Type: read</summary>
			public const int interfacesphysaddress = 5;
			/// <summary>IDX: 6 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesadminstatus_1207 = 6;
			/// <summary>IDX: 6 | Type: read</summary>
			public const int interfacesadminstatus = 6;
			/// <summary>IDX: 7 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesoperstatus_1208 = 7;
			/// <summary>IDX: 7 | Type: read</summary>
			public const int interfacesoperstatus = 7;
			/// <summary>IDX: 8 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfaceslastchange_1209 = 8;
			/// <summary>IDX: 8 | Type: read</summary>
			public const int interfaceslastchange = 8;
			/// <summary>IDX: 9 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesinoctets_1210 = 9;
			/// <summary>IDX: 9 | Type: read</summary>
			public const int interfacesinoctets = 9;
			/// <summary>IDX: 10 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesinucastpkts_1211 = 10;
			/// <summary>IDX: 10 | Type: read</summary>
			public const int interfacesinucastpkts = 10;
			/// <summary>IDX: 11 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesindiscards_1212 = 11;
			/// <summary>IDX: 11 | Type: read</summary>
			public const int interfacesindiscards = 11;
			/// <summary>IDX: 12 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesinerrors_1213 = 12;
			/// <summary>IDX: 12 | Type: read</summary>
			public const int interfacesinerrors = 12;
			/// <summary>IDX: 13 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesinunknownprotos_1214 = 13;
			/// <summary>IDX: 13 | Type: read</summary>
			public const int interfacesinunknownprotos = 13;
			/// <summary>IDX: 14 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesoutoctets_1215 = 14;
			/// <summary>IDX: 14 | Type: read</summary>
			public const int interfacesoutoctets = 14;
			/// <summary>IDX: 15 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesoutucastpkts_1216 = 15;
			/// <summary>IDX: 15 | Type: read</summary>
			public const int interfacesoutucastpkts = 15;
			/// <summary>IDX: 16 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesoutdiscards_1217 = 16;
			/// <summary>IDX: 16 | Type: read</summary>
			public const int interfacesoutdiscards = 16;
			/// <summary>IDX: 17 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesouterrors_1218 = 17;
			/// <summary>IDX: 17 | Type: read</summary>
			public const int interfacesouterrors = 17;
			/// <summary>IDX: 18 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesinbitrate_1219 = 18;
			/// <summary>IDX: 18 | Type: read</summary>
			public const int interfacesinbitrate = 18;
			/// <summary>IDX: 19 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesoutbitrate_1220 = 19;
			/// <summary>IDX: 19 | Type: read</summary>
			public const int interfacesoutbitrate = 19;
			/// <summary>IDX: 20 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesinmulticastpkts_1221 = 20;
			/// <summary>IDX: 20 | Type: read</summary>
			public const int interfacesinmulticastpkts = 20;
			/// <summary>IDX: 21 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesinbroadcastpkts_1222 = 21;
			/// <summary>IDX: 21 | Type: read</summary>
			public const int interfacesinbroadcastpkts = 21;
			/// <summary>IDX: 22 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesoutmulticastpkts_1223 = 22;
			/// <summary>IDX: 22 | Type: read</summary>
			public const int interfacesoutmulticastpkts = 22;
			/// <summary>IDX: 23 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesoutbroadcastpkts_1224 = 23;
			/// <summary>IDX: 23 | Type: read</summary>
			public const int interfacesoutbroadcastpkts = 23;
			/// <summary>IDX: 24 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacespromiscuousmode_1225 = 24;
			/// <summary>IDX: 24 | Type: read</summary>
			public const int interfacespromiscuousmode = 24;
			/// <summary>IDX: 25 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesphysicalconnector_1226 = 25;
			/// <summary>IDX: 25 | Type: read</summary>
			public const int interfacesphysicalconnector = 25;
			/// <summary>IDX: 26 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesalias_1227 = 26;
			/// <summary>IDX: 26 | Type: read</summary>
			public const int interfacesalias = 26;
			/// <summary>IDX: 27 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacescounterdiscontinuitytime_1228 = 27;
			/// <summary>IDX: 27 | Type: read</summary>
			public const int interfacescounterdiscontinuitytime = 27;
			/// <summary>IDX: 28 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfaceslinkupdowntrapenable_1229 = 28;
			/// <summary>IDX: 28 | Type: read</summary>
			public const int interfaceslinkupdowntrapenable = 28;
			/// <summary>IDX: 29 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesbandwidthutilization_1230 = 29;
			/// <summary>IDX: 29 | Type: read</summary>
			public const int interfacesbandwidthutilization = 29;
			/// <summary>IDX: 30 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesduplexstatus_1231 = 30;
			/// <summary>IDX: 30 | Type: read</summary>
			public const int interfacesduplexstatus = 30;
			/// <summary>IDX: 31 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int interfacesdisplaykey_1199 = 31;
			/// <summary>IDX: 31 | Type: read</summary>
			public const int interfacesdisplaykey = 31;
		}
	}
	public class Dot3statstable
	{
		/// <summary>PID: 1300</summary>
		public const int tablePid = 1300;
		/// <summary>IDX: 0</summary>
		public const int indexColumn = 0;
		/// <summary>PID: 1301</summary>
		public const int indexColumnPid = 1301;
		public class Pid
		{
			/// <summary>PID: 1301 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int dot3statsindex_1301 = 1301;
			/// <summary>PID: 1301 | Type: read</summary>
			public const int dot3statsindex = 1301;
			/// <summary>PID: 1302 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int dot3statsduplexstatus_1302 = 1302;
			/// <summary>PID: 1302 | Type: read</summary>
			public const int dot3statsduplexstatus = 1302;
			public class Write
			{
			}
		}
		public class Idx
		{
			/// <summary>IDX: 0 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int dot3statsindex_1301 = 0;
			/// <summary>IDX: 0 | Type: read</summary>
			public const int dot3statsindex = 0;
			/// <summary>IDX: 1 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int dot3statsduplexstatus_1302 = 1;
			/// <summary>IDX: 1 | Type: read</summary>
			public const int dot3statsduplexstatus = 1;
		}
	}
}
public class WriteParameters
{
	/// <summary>PID: 102  | Type: write</summary>
	public System.Object Sysname {get { return Protocol.GetParameter(102); }set { Protocol.SetParameter(102, value); }}
	/// <summary>PID: 104  | Type: write</summary>
	public System.Object Syscontact {get { return Protocol.GetParameter(104); }set { Protocol.SetParameter(104, value); }}
	/// <summary>PID: 106  | Type: write</summary>
	public System.Object Syslocation {get { return Protocol.GetParameter(106); }set { Protocol.SetParameter(106, value); }}
	/// <summary>PID: 1057  | Type: write | DISCREETS: Up = 1, Down = 2, Testing = 3</summary>
	public System.Object Iftableifadminstatus {get { return Protocol.GetParameter(1057); }set { Protocol.SetParameter(1057, value); }}
	/// <summary>PID: 1155  | Type: write | DISCREETS: Enabled = 1, Disabled = 2</summary>
	public System.Object Ifxtableiflinkupdowntrapenable {get { return Protocol.GetParameter(1155); }set { Protocol.SetParameter(1155, value); }}
	/// <summary>PID: 1157  | Type: write | DISCREETS: True = 1, False = 2</summary>
	public System.Object Ifxtableifpromiscuousmode {get { return Protocol.GetParameter(1157); }set { Protocol.SetParameter(1157, value); }}
	/// <summary>PID: 1159  | Type: write</summary>
	public System.Object Ifxtableifalias {get { return Protocol.GetParameter(1159); }set { Protocol.SetParameter(1159, value); }}
	/// <summary>PID: 1190  | Type: write | DISCREETS: Raw Tables... = Raw Tables</summary>
	public System.Object Interfacesrawtablespagebutton {get { return Protocol.GetParameter(1190); }set { Protocol.SetParameter(1190, value); }}
	/// <summary>PID: 1193  | Type: write | DISCREETS: Fast = 1, Accurate = 2</summary>
	public System.Object Interfacesratecalculationsmethod {get { return Protocol.GetParameter(1193); }set { Protocol.SetParameter(1193, value); }}
	/// <summary>PID: 1257  | Type: write | DISCREETS: Up = 1, Down = 2, Testing = 3</summary>
	public System.Object Interfacesadminstatus {get { return Protocol.GetParameter(1257); }set { Protocol.SetParameter(1257, value); }}
	/// <summary>PID: 1275  | Type: write | DISCREETS: True = 1, False = 2</summary>
	public System.Object Interfacespromiscuousmode {get { return Protocol.GetParameter(1275); }set { Protocol.SetParameter(1275, value); }}
	/// <summary>PID: 1277  | Type: write</summary>
	public System.Object Interfacesalias {get { return Protocol.GetParameter(1277); }set { Protocol.SetParameter(1277, value); }}
	/// <summary>PID: 1279  | Type: write | DISCREETS: Enabled = 1, Disabled = 2</summary>
	public System.Object Interfaceslinkupdowntrapenable {get { return Protocol.GetParameter(1279); }set { Protocol.SetParameter(1279, value); }}
	public SLProtocolExt Protocol;
	public WriteParameters(SLProtocolExt protocol)
	{
		Protocol = protocol;
	}
}
public interface SLProtocolExt : SLProtocol
{
	/// <summary>PID: 1000</summary>
	IftableQActionTable iftable { get; set; }
	/// <summary>PID: 1100</summary>
	IfxtableQActionTable ifxtable { get; set; }
	/// <summary>PID: 1200</summary>
	InterfacesQActionTable interfaces { get; set; }
	/// <summary>PID: 1300</summary>
	Dot3statstableQActionTable dot3statstable { get; set; }
	object Afterstartup_dummy { get; set; }
	object Fixed_0__fixed { get; set; }
	object Fixed_1__fixed { get; set; }
	object Sysuptimetimeouttrigger_dummy { get; set; }
	object Sysuptimegroupresultafterretries_92 { get; set; }
	object Sysuptimegroupresultafterretries { get; set; }
	object Sysuptimeaftergrouptrigger_dummy { get; set; }
	object Sysuptimebuffer_95 { get; set; }
	object Sysuptimebuffer { get; set; }
	object Sysuptime_100 { get; set; }
	object Sysuptime { get; set; }
	object Sysname_101 { get; set; }
	object Sysname { get; set; }
	object Sysname_102 { get; set; }
	object Syscontact_103 { get; set; }
	object Syscontact { get; set; }
	object Syscontact_104 { get; set; }
	object Syslocation_105 { get; set; }
	object Syslocation { get; set; }
	object Syslocation_106 { get; set; }
	object Sysobjectid_107 { get; set; }
	object Sysobjectid { get; set; }
	object Sysdescr_108 { get; set; }
	object Sysdescr { get; set; }
	object Iftabletimeouttrigger_dummy { get; set; }
	object Iftablegroupresultafterretries_992 { get; set; }
	object Iftablegroupresultafterretries { get; set; }
	object Iftablecalculatebitrates_dummy { get; set; }
	object Iftablesnmpagentrestartflag_995 { get; set; }
	object Iftablesnmpagentrestartflag { get; set; }
	object Iftablesetinstance_999 { get; set; }
	object Iftablesetinstance { get; set; }
	object Iftableifindex_1001 { get; set; }
	object Iftableifindex { get; set; }
	object Iftableifdescr_1002 { get; set; }
	object Iftableifdescr { get; set; }
	object Iftableiftype_1003 { get; set; }
	object Iftableiftype { get; set; }
	object Iftableifmtu_1004 { get; set; }
	object Iftableifmtu { get; set; }
	object Iftableifspeed_1005 { get; set; }
	object Iftableifspeed { get; set; }
	object Iftableifphysaddress_1006 { get; set; }
	object Iftableifphysaddress { get; set; }
	object Iftableifadminstatus_1007 { get; set; }
	object Iftableifadminstatus { get; set; }
	object Iftableifoperstatus_1008 { get; set; }
	object Iftableifoperstatus { get; set; }
	object Iftableiflastchange_1009 { get; set; }
	object Iftableiflastchange { get; set; }
	object Iftableifinoctets_1010 { get; set; }
	object Iftableifinoctets { get; set; }
	object Iftableifinucastpkts_1011 { get; set; }
	object Iftableifinucastpkts { get; set; }
	object Iftableifindiscards_1012 { get; set; }
	object Iftableifindiscards { get; set; }
	object Iftableifinerrors_1013 { get; set; }
	object Iftableifinerrors { get; set; }
	object Iftableifinunknownprotos_1014 { get; set; }
	object Iftableifinunknownprotos { get; set; }
	object Iftableifoutoctets_1015 { get; set; }
	object Iftableifoutoctets { get; set; }
	object Iftableifoutucastpkts_1016 { get; set; }
	object Iftableifoutucastpkts { get; set; }
	object Iftableifoutdiscards_1017 { get; set; }
	object Iftableifoutdiscards { get; set; }
	object Iftableifouterrors_1018 { get; set; }
	object Iftableifouterrors { get; set; }
	object Iftableifinbitrate_1019 { get; set; }
	object Iftableifinbitrate { get; set; }
	object Iftableifoutbitrate_1020 { get; set; }
	object Iftableifoutbitrate { get; set; }
	object Iftableifbandwidthutilization_1021 { get; set; }
	object Iftableifbandwidthutilization { get; set; }
	object Iftableifratedata_1022 { get; set; }
	object Iftableifratedata { get; set; }
	object Iftableifadminstatus_1057 { get; set; }
	object Ifxtabletimeouttrigger_dummy { get; set; }
	object Ifxtablegroupresultafterretries_1092 { get; set; }
	object Ifxtablegroupresultafterretries { get; set; }
	object Ifxtablecalculatebitrates_dummy { get; set; }
	object Ifxtablesnmpagentrestartflag_1095 { get; set; }
	object Ifxtablesnmpagentrestartflag { get; set; }
	object Ifxtablesetinstance_1099 { get; set; }
	object Ifxtablesetinstance { get; set; }
	object Ifxtableifindex_1101 { get; set; }
	object Ifxtableifindex { get; set; }
	object Ifxtableifname_1102 { get; set; }
	object Ifxtableifname { get; set; }
	object Ifxtableifinmulticastpkts_1103 { get; set; }
	object Ifxtableifinmulticastpkts { get; set; }
	object Ifxtableifinbroadcastpkts_1104 { get; set; }
	object Ifxtableifinbroadcastpkts { get; set; }
	object Ifxtableifoutmulticastpkts_1105 { get; set; }
	object Ifxtableifoutmulticastpkts { get; set; }
	object Ifxtableifoutbroadcastpkts_1106 { get; set; }
	object Ifxtableifoutbroadcastpkts { get; set; }
	object Ifxtableifhcinoctets_1107 { get; set; }
	object Ifxtableifhcinoctets { get; set; }
	object Ifxtableifhcinucastpkts_1108 { get; set; }
	object Ifxtableifhcinucastpkts { get; set; }
	object Ifxtableifhcinmulticastpkts_1109 { get; set; }
	object Ifxtableifhcinmulticastpkts { get; set; }
	object Ifxtableifhcinbroadcastpkts_1110 { get; set; }
	object Ifxtableifhcinbroadcastpkts { get; set; }
	object Ifxtableifhcoutoctets_1111 { get; set; }
	object Ifxtableifhcoutoctets { get; set; }
	object Ifxtableifhcoutucastpkts_1112 { get; set; }
	object Ifxtableifhcoutucastpkts { get; set; }
	object Ifxtableifhcoutmulticastpkts_1113 { get; set; }
	object Ifxtableifhcoutmulticastpkts { get; set; }
	object Ifxtableifhcoutbroadcastpkts_1114 { get; set; }
	object Ifxtableifhcoutbroadcastpkts { get; set; }
	object Ifxtableiflinkupdowntrapenable_1115 { get; set; }
	object Ifxtableiflinkupdowntrapenable { get; set; }
	object Ifxtableifhighspeed_1116 { get; set; }
	object Ifxtableifhighspeed { get; set; }
	object Ifxtableifpromiscuousmode_1117 { get; set; }
	object Ifxtableifpromiscuousmode { get; set; }
	object Ifxtableifconnectorpresent_1118 { get; set; }
	object Ifxtableifconnectorpresent { get; set; }
	object Ifxtableifalias_1119 { get; set; }
	object Ifxtableifalias { get; set; }
	object Ifxtableifcounterdiscontinuitytime_1120 { get; set; }
	object Ifxtableifcounterdiscontinuitytime { get; set; }
	object Ifxtableifinbitrate_1121 { get; set; }
	object Ifxtableifinbitrate { get; set; }
	object Ifxtableifoutbitrate_1122 { get; set; }
	object Ifxtableifoutbitrate { get; set; }
	object Ifxtableifbandwidthutilization_1123 { get; set; }
	object Ifxtableifbandwidthutilization { get; set; }
	object Ifxtableifratedata_1124 { get; set; }
	object Ifxtableifratedata { get; set; }
	object Ifxtableiflinkupdowntrapenable_1155 { get; set; }
	object Ifxtableifpromiscuousmode_1157 { get; set; }
	object Ifxtableifalias_1159 { get; set; }
	object Interfacesrawtablespagebutton_1190 { get; set; }
	object Interfacesrawtablespagebutton { get; set; }
	object Interfacestablemerge_dummy { get; set; }
	object Interfacesratecalculationsmethod_1192 { get; set; }
	object Interfacesratecalculationsmethod { get; set; }
	object Interfacesratecalculationsmethod_1193 { get; set; }
	object Interfacesdisplaykey_1199 { get; set; }
	object Interfacesdisplaykey { get; set; }
	object Interfacesindex_1201 { get; set; }
	object Interfacesindex { get; set; }
	object Interfacesdescr_1202 { get; set; }
	object Interfacesdescr { get; set; }
	object Interfacestype_1203 { get; set; }
	object Interfacestype { get; set; }
	object Interfacesmtu_1204 { get; set; }
	object Interfacesmtu { get; set; }
	object Interfacesspeed_1205 { get; set; }
	object Interfacesspeed { get; set; }
	object Interfacesphysaddress_1206 { get; set; }
	object Interfacesphysaddress { get; set; }
	object Interfacesadminstatus_1207 { get; set; }
	object Interfacesadminstatus { get; set; }
	object Interfacesoperstatus_1208 { get; set; }
	object Interfacesoperstatus { get; set; }
	object Interfaceslastchange_1209 { get; set; }
	object Interfaceslastchange { get; set; }
	object Interfacesinoctets_1210 { get; set; }
	object Interfacesinoctets { get; set; }
	object Interfacesinucastpkts_1211 { get; set; }
	object Interfacesinucastpkts { get; set; }
	object Interfacesindiscards_1212 { get; set; }
	object Interfacesindiscards { get; set; }
	object Interfacesinerrors_1213 { get; set; }
	object Interfacesinerrors { get; set; }
	object Interfacesinunknownprotos_1214 { get; set; }
	object Interfacesinunknownprotos { get; set; }
	object Interfacesoutoctets_1215 { get; set; }
	object Interfacesoutoctets { get; set; }
	object Interfacesoutucastpkts_1216 { get; set; }
	object Interfacesoutucastpkts { get; set; }
	object Interfacesoutdiscards_1217 { get; set; }
	object Interfacesoutdiscards { get; set; }
	object Interfacesouterrors_1218 { get; set; }
	object Interfacesouterrors { get; set; }
	object Interfacesinbitrate_1219 { get; set; }
	object Interfacesinbitrate { get; set; }
	object Interfacesoutbitrate_1220 { get; set; }
	object Interfacesoutbitrate { get; set; }
	object Interfacesinmulticastpkts_1221 { get; set; }
	object Interfacesinmulticastpkts { get; set; }
	object Interfacesinbroadcastpkts_1222 { get; set; }
	object Interfacesinbroadcastpkts { get; set; }
	object Interfacesoutmulticastpkts_1223 { get; set; }
	object Interfacesoutmulticastpkts { get; set; }
	object Interfacesoutbroadcastpkts_1224 { get; set; }
	object Interfacesoutbroadcastpkts { get; set; }
	object Interfacespromiscuousmode_1225 { get; set; }
	object Interfacespromiscuousmode { get; set; }
	object Interfacesphysicalconnector_1226 { get; set; }
	object Interfacesphysicalconnector { get; set; }
	object Interfacesalias_1227 { get; set; }
	object Interfacesalias { get; set; }
	object Interfacescounterdiscontinuitytime_1228 { get; set; }
	object Interfacescounterdiscontinuitytime { get; set; }
	object Interfaceslinkupdowntrapenable_1229 { get; set; }
	object Interfaceslinkupdowntrapenable { get; set; }
	object Interfacesbandwidthutilization_1230 { get; set; }
	object Interfacesbandwidthutilization { get; set; }
	object Interfacesduplexstatus_1231 { get; set; }
	object Interfacesduplexstatus { get; set; }
	object Interfacesadminstatus_1257 { get; set; }
	object Interfacespromiscuousmode_1275 { get; set; }
	object Interfacesalias_1277 { get; set; }
	object Interfaceslinkupdowntrapenable_1279 { get; set; }
	object Dot3statsindex_1301 { get; set; }
	object Dot3statsindex { get; set; }
	object Dot3statsduplexstatus_1302 { get; set; }
	object Dot3statsduplexstatus { get; set; }
	WriteParameters Write { get; set; }
}
public class ConcreteSLProtocolExt : ConcreteSLProtocol, SLProtocolExt
{
	/// <summary>PID: 1000</summary>
	public IftableQActionTable iftable { get; set; }
	/// <summary>PID: 1100</summary>
	public IfxtableQActionTable ifxtable { get; set; }
	/// <summary>PID: 1200</summary>
	public InterfacesQActionTable interfaces { get; set; }
	/// <summary>PID: 1300</summary>
	public Dot3statstableQActionTable dot3statstable { get; set; }
	/// <summary>PID: 2  | Type: dummy</summary>
	public System.Object Afterstartup_dummy {get { return GetParameter(2); }set { SetParameter(2, value); }}
	/// <summary>PID: 10  | Type: fixed</summary>
	public System.Object Fixed_0__fixed {get { return GetParameter(10); }set { SetParameter(10, value); }}
	/// <summary>PID: 11  | Type: fixed</summary>
	public System.Object Fixed_1__fixed {get { return GetParameter(11); }set { SetParameter(11, value); }}
	/// <summary>PID: 91  | Type: dummy</summary>
	public System.Object Sysuptimetimeouttrigger_dummy {get { return GetParameter(91); }set { SetParameter(91, value); }}
	/// <summary>PID: 92  | Type: read | DISCREETS: Success = 0, Timeout = 1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Sysuptimegroupresultafterretries_92 {get { return GetParameter(92); }set { SetParameter(92, value); }}
	/// <summary>PID: 92  | Type: read | DISCREETS: Success = 0, Timeout = 1</summary>
	public System.Object Sysuptimegroupresultafterretries {get { return GetParameter(92); }set { SetParameter(92, value); }}
	/// <summary>PID: 93  | Type: dummy</summary>
	public System.Object Sysuptimeaftergrouptrigger_dummy {get { return GetParameter(93); }set { SetParameter(93, value); }}
	/// <summary>PID: 95  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Sysuptimebuffer_95 {get { return GetParameter(95); }set { SetParameter(95, value); }}
	/// <summary>PID: 95  | Type: read</summary>
	public System.Object Sysuptimebuffer {get { return GetParameter(95); }set { SetParameter(95, value); }}
	/// <summary>PID: 100  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Sysuptime_100 {get { return GetParameter(100); }set { SetParameter(100, value); }}
	/// <summary>PID: 100  | Type: read</summary>
	public System.Object Sysuptime {get { return GetParameter(100); }set { SetParameter(100, value); }}
	/// <summary>PID: 101  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Sysname_101 {get { return GetParameter(101); }set { SetParameter(101, value); }}
	/// <summary>PID: 101  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Sysname {get { return GetParameter(101); }set { SetParameter(101, value); }}
	/// <summary>PID: 102  | Type: write</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Sysname_102 {get { return GetParameter(102); }set { SetParameter(102, value); }}
	/// <summary>PID: 103  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Syscontact_103 {get { return GetParameter(103); }set { SetParameter(103, value); }}
	/// <summary>PID: 103  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Syscontact {get { return GetParameter(103); }set { SetParameter(103, value); }}
	/// <summary>PID: 104  | Type: write</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Syscontact_104 {get { return GetParameter(104); }set { SetParameter(104, value); }}
	/// <summary>PID: 105  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Syslocation_105 {get { return GetParameter(105); }set { SetParameter(105, value); }}
	/// <summary>PID: 105  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Syslocation {get { return GetParameter(105); }set { SetParameter(105, value); }}
	/// <summary>PID: 106  | Type: write</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Syslocation_106 {get { return GetParameter(106); }set { SetParameter(106, value); }}
	/// <summary>PID: 107  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Sysobjectid_107 {get { return GetParameter(107); }set { SetParameter(107, value); }}
	/// <summary>PID: 107  | Type: read</summary>
	public System.Object Sysobjectid {get { return GetParameter(107); }set { SetParameter(107, value); }}
	/// <summary>PID: 108  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Sysdescr_108 {get { return GetParameter(108); }set { SetParameter(108, value); }}
	/// <summary>PID: 108  | Type: read</summary>
	public System.Object Sysdescr {get { return GetParameter(108); }set { SetParameter(108, value); }}
	/// <summary>PID: 991  | Type: dummy</summary>
	public System.Object Iftabletimeouttrigger_dummy {get { return GetParameter(991); }set { SetParameter(991, value); }}
	/// <summary>PID: 992  | Type: read | DISCREETS: Success = 0, Timeout = 1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftablegroupresultafterretries_992 {get { return GetParameter(992); }set { SetParameter(992, value); }}
	/// <summary>PID: 992  | Type: read | DISCREETS: Success = 0, Timeout = 1</summary>
	public System.Object Iftablegroupresultafterretries {get { return GetParameter(992); }set { SetParameter(992, value); }}
	/// <summary>PID: 993  | Type: dummy</summary>
	public System.Object Iftablecalculatebitrates_dummy {get { return GetParameter(993); }set { SetParameter(993, value); }}
	/// <summary>PID: 995  | Type: read | DISCREETS: Not Restarted = 0, Restarted = 1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftablesnmpagentrestartflag_995 {get { return GetParameter(995); }set { SetParameter(995, value); }}
	/// <summary>PID: 995  | Type: read | DISCREETS: Not Restarted = 0, Restarted = 1</summary>
	public System.Object Iftablesnmpagentrestartflag {get { return GetParameter(995); }set { SetParameter(995, value); }}
	/// <summary>PID: 999  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftablesetinstance_999 {get { return GetParameter(999); }set { SetParameter(999, value); }}
	/// <summary>PID: 999  | Type: read</summary>
	public System.Object Iftablesetinstance {get { return GetParameter(999); }set { SetParameter(999, value); }}
	/// <summary>PID: 1001  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifindex_1001 {get { return GetParameter(1001); }set { SetParameter(1001, value); }}
	/// <summary>PID: 1001  | Type: read</summary>
	public System.Object Iftableifindex {get { return GetParameter(1001); }set { SetParameter(1001, value); }}
	/// <summary>PID: 1002  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifdescr_1002 {get { return GetParameter(1002); }set { SetParameter(1002, value); }}
	/// <summary>PID: 1002  | Type: read</summary>
	public System.Object Iftableifdescr {get { return GetParameter(1002); }set { SetParameter(1002, value); }}
	/// <summary>PID: 1003  | Type: read | DISCREETS: Other = 1, Regular 1822 = 2, HDH 1822 = 3, DDN X 25 = 4, RFC 877 X.25 = 5, Ethernet CSMACD = 6, ISO 8802.3 CSMA/CD = 7, ISO 8802.4 Token Bus = 8, ISO 8802.5 Token Ring = 9, ISO 8802.6 MAN = 10, Star LAN = 11, PROTEON 10 Mb = 12, PROTEON 80 Mb = 13, HYPERchannel = 14, FDDI = 15, LAPB = 16, SDLC = 17, DS1 = 18, E1 = 19, Basic ISDN = 20, Primary ISDN = 21, Proprietary Point to Point Serial = 22, PPP = 23, Software Loopback = 24, EON = 25, Ethernet 3 Mb = 26, NSIP = 27, SlIP = 28, Ultra = 29, DS3 = 30, SIP = 31, Frame Relay = 32, RS-232 = 33, Parallel Port = 34, ARCNET = 35, ARCNET Plus = 36, ATM = 37, MIOX 25 = 38, SONET = 39, X.25 PLE = 40, ISO 8802.2 LLC = 41, Local Talk = 42, SMDS DXI = 43, Frame Relay Service = 44, V.35 = 45, HSSI = 46, HIPPI = 47, Modem = 48, AAL5 = 49, SONET Path = 50, SONET VT = 51, SMDS ICIP = 52, Proprietary Virtual = 53, Proprietary Multiplexor = 54, IEEE 802.12 = 55, Fiber Channel = 56, HIPPI Interface = 57, Frame Relay Interconnect = 58, AFLANE 802.3 = 59, AFLANE 802.5 = 60, CCT Emulated = 61, Fast Ether = 62, ISDN = 63, V.11 = 64, V.36 = 65, G.703 at 64kbps = 66, G.703 at 2 Mbps = 67, QLLC = 68, Fast Ether FX = 69, Channel = 70, IEEE 802.11 = 71, IBM System 360/370 Channel = 72, ESCON = 73, DLSW = 74, ISDN S/T Interface = 75, ISDN U Interface = 76, LAPD = 77, IP Switch = 78, RSRB = 79, ATM Logical = 80, DS0 = 81, DS0 Bundle = 82, Bisynchronous Protocol = 83, Asynchronous Protocol = 84, CNR = 85, ISO 8802.5 DTR = 86, EPLRS = 87, ARAP = 88, Proprietary CNLS = 89, Host PAD = 90, Term PAD = 91, Frame Relay MPI = 92, X.213 = 93, ADSL = 94, RADSL = 95, SDSL = 96, VDSL = 97, ISO 8802.5 CRFP Int = 98, Myrinet = 99, Voice EM = 100, Voice FXO = 101, Voice FXS = 102, Voice ENCAP = 103, Voice over IP = 104, ATM DXI = 105, ATM FUNI = 106, ATM IMA = 107, PPP Multilink Bundle = 108, IP over CDLC = 109, IP over Claw = 110, Stack to Stack = 111, Virtual IP Address = 112, MPC = 113, IP over ATM = 114, ISO 8802.5 Fiber = 115, TDLC = 116, Gigabit Ethernet = 117, HDLC = 118, LAPF = 119, V.37 = 120, X.25 MLP = 121, X.25 Hunt Group = 122, Transparent HDLC = 123, Interleave Channel = 124, Fast Channel = 125, IP = 126, DOCS Cable MAC Layer = 127, DOCS Cable Downstream = 128, Docs Cable Upstream = 129, A 12 MPP Switch = 130, Tunnel = 131, Coffee = 132, CES = 133, ATM Sub Interface = 134, L2 VLAN = 135, L3 IP VLAN = 136, L3 IPC VLAN = 137, Digital Powerline = 138, Media Mail over IP = 139, DTM = 140, DCN = 141, IP Forward = 142, MSDSL = 143, IEEE 1394 = 144, If GSN = 145, DVB-RCC MAC Layer = 146, DVB-RCC Downstream = 147, DVB-RCC Upstream = 148, ATM Virtual = 149, MPLS Tunnel = 150, SRP = 151, Voice over ATM = 152, Voice over Frame Relay = 153, IDSL = 154, Composite Link = 155, SS7 Signaling Link = 156, Proprietary Wireless P2P = 157, Frame Forward = 158, RFC 1483 = 159, USB = 160, IEEE 802.3ad Link Aggregate = 161, BGP Policy Accounting = 162, FRF.16 MFR Bundle = 163, H.323 Gatekeeper = 164, H.323 Proxy = 165, MPLS = 166, MF Signaling Link = 167, HDSL2 = 168, SHDSL = 169, DS1 FDL = 170, Packet over SONET/SDH = 171, DVB ASI In = 172, DVB ASI Out = 173, PLC = 174, NFAS = 175, TR008 = 176, GR-303 RDT = 177, GR-303 IDT = 178, ISUP = 179, Proprietary DOCs Wireless MAC Layer = 180, Proprietary DOCS Wireless Downstream = 181, Proprietary DOCS Wireless Upstream = 182, HiperLAN 2 = 183, Proprietary BW AP 2 Mp = 184, SONET Overhead Channel = 185, Digital Wrapper Overhead Channel = 186, AAL2 = 187, Radio MAC = 188, ATM Radio = 189, IMT = 190, MVL = 191, Reach DSL = 192, FR DLCI End Point = 193, ATM VCI End Point = 194, Optical Channel = 195, Optical Transport = 196, Proprietary ATM = 197, Voice over Cable = 198, Infiniband = 199, TE Link = 200, Q.2931 = 201, Virtual Trunk Group = 202, SIP Trunk Group = 203, SIP Signaling = 204, DOCS Cable Upstream Channel = 205, Econet = 206, PON 155 = 207, PON 622 = 208, Bridge = 209, Line Group = 210, Voice EMFGD = 211, Voice FGDEANA = 212, Voice DID = 213, MPEG Transport = 214, 6to4 = 215, GTP = 216, PDN Ether Loop 1 = 217, PDN Ether Loop 2 = 218, Optical Channel Group = 219, HomePNA = 220, GFP = 221, CISCO IS LVLAN = 222, Actelis Meta LOOP = 223, FCIP Link = 224, RPR = 225, QAM = 226, LMP = 227, CBL Vecta Star = 228, DOCS Cable Modular CMTS Downstream = 229, ADSL2 = 230, MAC Sec Controlled IF = 231, MAC Sec Uncontrolled IF = 232, AVICI Optical Ether = 233, ATMBond = 234, Voice FGD Operator Service = 235, MoCA Version 1 = 236, IEEE 802.16 WMAN = 237, ADSL2+ = 238, DVB-RCS MAC Layer = 239, DVB Satellite TDM = 240, DVB-RCS TDMA = 241, X.86 Laps = 242, WWAN PP = 243, WWAN PP2 = 244, Voice EBS = 245, If PW Type = 246, ILAN = 247, PIP = 248, ALU ELP = 249, G-PON = 250, VDSL2 = 251, CAPWAP Dot 11 Profile = 252, CAPWAP Dot 11 BSS = 253, CAPWAP WTP Virtual Radio = 254, Bits = 255, DOCSIS CATV Upstream RF Port = 256, CATV Downstream RF Port = 257, VMWare Virtual NIC = 258, IEEE 802.15 4 WPAN = 259, OTN ODU = 260, OTN OTU = 261, If VFI Type = 262, G.998.1 = 263, G.998.2 = 264, G.998.3 = 265, ALU EPON = 266, ALU EPON ONU = 267, ALU EPON Physical Unit = 268, ALU EPON Logical Link = 269, ALU GPON ONU = 270, ALU GPON Physical Unit = 271, VMWare NIC Team = 272, DOCS OFDM Downstream = 277, DOCS OFDMA Upstream = 278, G.fast Port = 279, SDCI = 280, Xbox Wireless = 281, FastDSL = 282, Cable SCTE 55-1 OOB Forward Channel = 283, Cable SCTE 55-1 OOB Return Channel = 284, Cable SCTE 55-2 OOB Downstream Channel = 285, Cable SCTE 55-2 OOB Upstream Channel = 286, DOCS Cable NDF = 287, DOCS Cable NDR = 288, PTM = 289, GHN = 290, OTN OTSI = 291, OTN OTUC = 292, OTN ODUC = 293, OTN OTUC Signal = 294</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableiftype_1003 {get { return GetParameter(1003); }set { SetParameter(1003, value); }}
	/// <summary>PID: 1003  | Type: read | DISCREETS: Other = 1, Regular 1822 = 2, HDH 1822 = 3, DDN X 25 = 4, RFC 877 X.25 = 5, Ethernet CSMACD = 6, ISO 8802.3 CSMA/CD = 7, ISO 8802.4 Token Bus = 8, ISO 8802.5 Token Ring = 9, ISO 8802.6 MAN = 10, Star LAN = 11, PROTEON 10 Mb = 12, PROTEON 80 Mb = 13, HYPERchannel = 14, FDDI = 15, LAPB = 16, SDLC = 17, DS1 = 18, E1 = 19, Basic ISDN = 20, Primary ISDN = 21, Proprietary Point to Point Serial = 22, PPP = 23, Software Loopback = 24, EON = 25, Ethernet 3 Mb = 26, NSIP = 27, SlIP = 28, Ultra = 29, DS3 = 30, SIP = 31, Frame Relay = 32, RS-232 = 33, Parallel Port = 34, ARCNET = 35, ARCNET Plus = 36, ATM = 37, MIOX 25 = 38, SONET = 39, X.25 PLE = 40, ISO 8802.2 LLC = 41, Local Talk = 42, SMDS DXI = 43, Frame Relay Service = 44, V.35 = 45, HSSI = 46, HIPPI = 47, Modem = 48, AAL5 = 49, SONET Path = 50, SONET VT = 51, SMDS ICIP = 52, Proprietary Virtual = 53, Proprietary Multiplexor = 54, IEEE 802.12 = 55, Fiber Channel = 56, HIPPI Interface = 57, Frame Relay Interconnect = 58, AFLANE 802.3 = 59, AFLANE 802.5 = 60, CCT Emulated = 61, Fast Ether = 62, ISDN = 63, V.11 = 64, V.36 = 65, G.703 at 64kbps = 66, G.703 at 2 Mbps = 67, QLLC = 68, Fast Ether FX = 69, Channel = 70, IEEE 802.11 = 71, IBM System 360/370 Channel = 72, ESCON = 73, DLSW = 74, ISDN S/T Interface = 75, ISDN U Interface = 76, LAPD = 77, IP Switch = 78, RSRB = 79, ATM Logical = 80, DS0 = 81, DS0 Bundle = 82, Bisynchronous Protocol = 83, Asynchronous Protocol = 84, CNR = 85, ISO 8802.5 DTR = 86, EPLRS = 87, ARAP = 88, Proprietary CNLS = 89, Host PAD = 90, Term PAD = 91, Frame Relay MPI = 92, X.213 = 93, ADSL = 94, RADSL = 95, SDSL = 96, VDSL = 97, ISO 8802.5 CRFP Int = 98, Myrinet = 99, Voice EM = 100, Voice FXO = 101, Voice FXS = 102, Voice ENCAP = 103, Voice over IP = 104, ATM DXI = 105, ATM FUNI = 106, ATM IMA = 107, PPP Multilink Bundle = 108, IP over CDLC = 109, IP over Claw = 110, Stack to Stack = 111, Virtual IP Address = 112, MPC = 113, IP over ATM = 114, ISO 8802.5 Fiber = 115, TDLC = 116, Gigabit Ethernet = 117, HDLC = 118, LAPF = 119, V.37 = 120, X.25 MLP = 121, X.25 Hunt Group = 122, Transparent HDLC = 123, Interleave Channel = 124, Fast Channel = 125, IP = 126, DOCS Cable MAC Layer = 127, DOCS Cable Downstream = 128, Docs Cable Upstream = 129, A 12 MPP Switch = 130, Tunnel = 131, Coffee = 132, CES = 133, ATM Sub Interface = 134, L2 VLAN = 135, L3 IP VLAN = 136, L3 IPC VLAN = 137, Digital Powerline = 138, Media Mail over IP = 139, DTM = 140, DCN = 141, IP Forward = 142, MSDSL = 143, IEEE 1394 = 144, If GSN = 145, DVB-RCC MAC Layer = 146, DVB-RCC Downstream = 147, DVB-RCC Upstream = 148, ATM Virtual = 149, MPLS Tunnel = 150, SRP = 151, Voice over ATM = 152, Voice over Frame Relay = 153, IDSL = 154, Composite Link = 155, SS7 Signaling Link = 156, Proprietary Wireless P2P = 157, Frame Forward = 158, RFC 1483 = 159, USB = 160, IEEE 802.3ad Link Aggregate = 161, BGP Policy Accounting = 162, FRF.16 MFR Bundle = 163, H.323 Gatekeeper = 164, H.323 Proxy = 165, MPLS = 166, MF Signaling Link = 167, HDSL2 = 168, SHDSL = 169, DS1 FDL = 170, Packet over SONET/SDH = 171, DVB ASI In = 172, DVB ASI Out = 173, PLC = 174, NFAS = 175, TR008 = 176, GR-303 RDT = 177, GR-303 IDT = 178, ISUP = 179, Proprietary DOCs Wireless MAC Layer = 180, Proprietary DOCS Wireless Downstream = 181, Proprietary DOCS Wireless Upstream = 182, HiperLAN 2 = 183, Proprietary BW AP 2 Mp = 184, SONET Overhead Channel = 185, Digital Wrapper Overhead Channel = 186, AAL2 = 187, Radio MAC = 188, ATM Radio = 189, IMT = 190, MVL = 191, Reach DSL = 192, FR DLCI End Point = 193, ATM VCI End Point = 194, Optical Channel = 195, Optical Transport = 196, Proprietary ATM = 197, Voice over Cable = 198, Infiniband = 199, TE Link = 200, Q.2931 = 201, Virtual Trunk Group = 202, SIP Trunk Group = 203, SIP Signaling = 204, DOCS Cable Upstream Channel = 205, Econet = 206, PON 155 = 207, PON 622 = 208, Bridge = 209, Line Group = 210, Voice EMFGD = 211, Voice FGDEANA = 212, Voice DID = 213, MPEG Transport = 214, 6to4 = 215, GTP = 216, PDN Ether Loop 1 = 217, PDN Ether Loop 2 = 218, Optical Channel Group = 219, HomePNA = 220, GFP = 221, CISCO IS LVLAN = 222, Actelis Meta LOOP = 223, FCIP Link = 224, RPR = 225, QAM = 226, LMP = 227, CBL Vecta Star = 228, DOCS Cable Modular CMTS Downstream = 229, ADSL2 = 230, MAC Sec Controlled IF = 231, MAC Sec Uncontrolled IF = 232, AVICI Optical Ether = 233, ATMBond = 234, Voice FGD Operator Service = 235, MoCA Version 1 = 236, IEEE 802.16 WMAN = 237, ADSL2+ = 238, DVB-RCS MAC Layer = 239, DVB Satellite TDM = 240, DVB-RCS TDMA = 241, X.86 Laps = 242, WWAN PP = 243, WWAN PP2 = 244, Voice EBS = 245, If PW Type = 246, ILAN = 247, PIP = 248, ALU ELP = 249, G-PON = 250, VDSL2 = 251, CAPWAP Dot 11 Profile = 252, CAPWAP Dot 11 BSS = 253, CAPWAP WTP Virtual Radio = 254, Bits = 255, DOCSIS CATV Upstream RF Port = 256, CATV Downstream RF Port = 257, VMWare Virtual NIC = 258, IEEE 802.15 4 WPAN = 259, OTN ODU = 260, OTN OTU = 261, If VFI Type = 262, G.998.1 = 263, G.998.2 = 264, G.998.3 = 265, ALU EPON = 266, ALU EPON ONU = 267, ALU EPON Physical Unit = 268, ALU EPON Logical Link = 269, ALU GPON ONU = 270, ALU GPON Physical Unit = 271, VMWare NIC Team = 272, DOCS OFDM Downstream = 277, DOCS OFDMA Upstream = 278, G.fast Port = 279, SDCI = 280, Xbox Wireless = 281, FastDSL = 282, Cable SCTE 55-1 OOB Forward Channel = 283, Cable SCTE 55-1 OOB Return Channel = 284, Cable SCTE 55-2 OOB Downstream Channel = 285, Cable SCTE 55-2 OOB Upstream Channel = 286, DOCS Cable NDF = 287, DOCS Cable NDR = 288, PTM = 289, GHN = 290, OTN OTSI = 291, OTN OTUC = 292, OTN ODUC = 293, OTN OTUC Signal = 294</summary>
	public System.Object Iftableiftype {get { return GetParameter(1003); }set { SetParameter(1003, value); }}
	/// <summary>PID: 1004  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifmtu_1004 {get { return GetParameter(1004); }set { SetParameter(1004, value); }}
	/// <summary>PID: 1004  | Type: read</summary>
	public System.Object Iftableifmtu {get { return GetParameter(1004); }set { SetParameter(1004, value); }}
	/// <summary>PID: 1005  | Type: read | EXCEPTIONS: N/A = 0, High Speed = 4294967295</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifspeed_1005 {get { return GetParameter(1005); }set { SetParameter(1005, value); }}
	/// <summary>PID: 1005  | Type: read | EXCEPTIONS: N/A = 0, High Speed = 4294967295</summary>
	public System.Object Iftableifspeed {get { return GetParameter(1005); }set { SetParameter(1005, value); }}
	/// <summary>PID: 1006  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifphysaddress_1006 {get { return GetParameter(1006); }set { SetParameter(1006, value); }}
	/// <summary>PID: 1006  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Iftableifphysaddress {get { return GetParameter(1006); }set { SetParameter(1006, value); }}
	/// <summary>PID: 1007  | Type: read | DISCREETS: Up = 1, Down = 2, Testing = 3</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifadminstatus_1007 {get { return GetParameter(1007); }set { SetParameter(1007, value); }}
	/// <summary>PID: 1007  | Type: read | DISCREETS: Up = 1, Down = 2, Testing = 3</summary>
	public System.Object Iftableifadminstatus {get { return GetParameter(1007); }set { SetParameter(1007, value); }}
	/// <summary>PID: 1008  | Type: read | DISCREETS: Up = 1, Down = 2, Testing = 3, Unknown = 4, Dormant = 5, Not Present = 6, Lower Layer Down = 7</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifoperstatus_1008 {get { return GetParameter(1008); }set { SetParameter(1008, value); }}
	/// <summary>PID: 1008  | Type: read | DISCREETS: Up = 1, Down = 2, Testing = 3, Unknown = 4, Dormant = 5, Not Present = 6, Lower Layer Down = 7</summary>
	public System.Object Iftableifoperstatus {get { return GetParameter(1008); }set { SetParameter(1008, value); }}
	/// <summary>PID: 1009  | Type: read | EXCEPTIONS: No Change = 0</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableiflastchange_1009 {get { return GetParameter(1009); }set { SetParameter(1009, value); }}
	/// <summary>PID: 1009  | Type: read | EXCEPTIONS: No Change = 0</summary>
	public System.Object Iftableiflastchange {get { return GetParameter(1009); }set { SetParameter(1009, value); }}
	/// <summary>PID: 1010  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifinoctets_1010 {get { return GetParameter(1010); }set { SetParameter(1010, value); }}
	/// <summary>PID: 1010  | Type: read</summary>
	public System.Object Iftableifinoctets {get { return GetParameter(1010); }set { SetParameter(1010, value); }}
	/// <summary>PID: 1011  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifinucastpkts_1011 {get { return GetParameter(1011); }set { SetParameter(1011, value); }}
	/// <summary>PID: 1011  | Type: read</summary>
	public System.Object Iftableifinucastpkts {get { return GetParameter(1011); }set { SetParameter(1011, value); }}
	/// <summary>PID: 1012  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifindiscards_1012 {get { return GetParameter(1012); }set { SetParameter(1012, value); }}
	/// <summary>PID: 1012  | Type: read</summary>
	public System.Object Iftableifindiscards {get { return GetParameter(1012); }set { SetParameter(1012, value); }}
	/// <summary>PID: 1013  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifinerrors_1013 {get { return GetParameter(1013); }set { SetParameter(1013, value); }}
	/// <summary>PID: 1013  | Type: read</summary>
	public System.Object Iftableifinerrors {get { return GetParameter(1013); }set { SetParameter(1013, value); }}
	/// <summary>PID: 1014  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifinunknownprotos_1014 {get { return GetParameter(1014); }set { SetParameter(1014, value); }}
	/// <summary>PID: 1014  | Type: read</summary>
	public System.Object Iftableifinunknownprotos {get { return GetParameter(1014); }set { SetParameter(1014, value); }}
	/// <summary>PID: 1015  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifoutoctets_1015 {get { return GetParameter(1015); }set { SetParameter(1015, value); }}
	/// <summary>PID: 1015  | Type: read</summary>
	public System.Object Iftableifoutoctets {get { return GetParameter(1015); }set { SetParameter(1015, value); }}
	/// <summary>PID: 1016  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifoutucastpkts_1016 {get { return GetParameter(1016); }set { SetParameter(1016, value); }}
	/// <summary>PID: 1016  | Type: read</summary>
	public System.Object Iftableifoutucastpkts {get { return GetParameter(1016); }set { SetParameter(1016, value); }}
	/// <summary>PID: 1017  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifoutdiscards_1017 {get { return GetParameter(1017); }set { SetParameter(1017, value); }}
	/// <summary>PID: 1017  | Type: read</summary>
	public System.Object Iftableifoutdiscards {get { return GetParameter(1017); }set { SetParameter(1017, value); }}
	/// <summary>PID: 1018  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifouterrors_1018 {get { return GetParameter(1018); }set { SetParameter(1018, value); }}
	/// <summary>PID: 1018  | Type: read</summary>
	public System.Object Iftableifouterrors {get { return GetParameter(1018); }set { SetParameter(1018, value); }}
	/// <summary>PID: 1019  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifinbitrate_1019 {get { return GetParameter(1019); }set { SetParameter(1019, value); }}
	/// <summary>PID: 1019  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Iftableifinbitrate {get { return GetParameter(1019); }set { SetParameter(1019, value); }}
	/// <summary>PID: 1020  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifoutbitrate_1020 {get { return GetParameter(1020); }set { SetParameter(1020, value); }}
	/// <summary>PID: 1020  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Iftableifoutbitrate {get { return GetParameter(1020); }set { SetParameter(1020, value); }}
	/// <summary>PID: 1021  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifbandwidthutilization_1021 {get { return GetParameter(1021); }set { SetParameter(1021, value); }}
	/// <summary>PID: 1021  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Iftableifbandwidthutilization {get { return GetParameter(1021); }set { SetParameter(1021, value); }}
	/// <summary>PID: 1022  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifratedata_1022 {get { return GetParameter(1022); }set { SetParameter(1022, value); }}
	/// <summary>PID: 1022  | Type: read</summary>
	public System.Object Iftableifratedata {get { return GetParameter(1022); }set { SetParameter(1022, value); }}
	/// <summary>PID: 1057  | Type: write | DISCREETS: Up = 1, Down = 2, Testing = 3</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifadminstatus_1057 {get { return GetParameter(1057); }set { SetParameter(1057, value); }}
	/// <summary>PID: 1091  | Type: dummy</summary>
	public System.Object Ifxtabletimeouttrigger_dummy {get { return GetParameter(1091); }set { SetParameter(1091, value); }}
	/// <summary>PID: 1092  | Type: read | DISCREETS: Success = 0, Timeout = 1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtablegroupresultafterretries_1092 {get { return GetParameter(1092); }set { SetParameter(1092, value); }}
	/// <summary>PID: 1092  | Type: read | DISCREETS: Success = 0, Timeout = 1</summary>
	public System.Object Ifxtablegroupresultafterretries {get { return GetParameter(1092); }set { SetParameter(1092, value); }}
	/// <summary>PID: 1093  | Type: dummy</summary>
	public System.Object Ifxtablecalculatebitrates_dummy {get { return GetParameter(1093); }set { SetParameter(1093, value); }}
	/// <summary>PID: 1095  | Type: read | DISCREETS: False = 0, True = 1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtablesnmpagentrestartflag_1095 {get { return GetParameter(1095); }set { SetParameter(1095, value); }}
	/// <summary>PID: 1095  | Type: read | DISCREETS: False = 0, True = 1</summary>
	public System.Object Ifxtablesnmpagentrestartflag {get { return GetParameter(1095); }set { SetParameter(1095, value); }}
	/// <summary>PID: 1099  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtablesetinstance_1099 {get { return GetParameter(1099); }set { SetParameter(1099, value); }}
	/// <summary>PID: 1099  | Type: read</summary>
	public System.Object Ifxtablesetinstance {get { return GetParameter(1099); }set { SetParameter(1099, value); }}
	/// <summary>PID: 1101  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifindex_1101 {get { return GetParameter(1101); }set { SetParameter(1101, value); }}
	/// <summary>PID: 1101  | Type: read</summary>
	public System.Object Ifxtableifindex {get { return GetParameter(1101); }set { SetParameter(1101, value); }}
	/// <summary>PID: 1102  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifname_1102 {get { return GetParameter(1102); }set { SetParameter(1102, value); }}
	/// <summary>PID: 1102  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Ifxtableifname {get { return GetParameter(1102); }set { SetParameter(1102, value); }}
	/// <summary>PID: 1103  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifinmulticastpkts_1103 {get { return GetParameter(1103); }set { SetParameter(1103, value); }}
	/// <summary>PID: 1103  | Type: read</summary>
	public System.Object Ifxtableifinmulticastpkts {get { return GetParameter(1103); }set { SetParameter(1103, value); }}
	/// <summary>PID: 1104  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifinbroadcastpkts_1104 {get { return GetParameter(1104); }set { SetParameter(1104, value); }}
	/// <summary>PID: 1104  | Type: read</summary>
	public System.Object Ifxtableifinbroadcastpkts {get { return GetParameter(1104); }set { SetParameter(1104, value); }}
	/// <summary>PID: 1105  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifoutmulticastpkts_1105 {get { return GetParameter(1105); }set { SetParameter(1105, value); }}
	/// <summary>PID: 1105  | Type: read</summary>
	public System.Object Ifxtableifoutmulticastpkts {get { return GetParameter(1105); }set { SetParameter(1105, value); }}
	/// <summary>PID: 1106  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifoutbroadcastpkts_1106 {get { return GetParameter(1106); }set { SetParameter(1106, value); }}
	/// <summary>PID: 1106  | Type: read</summary>
	public System.Object Ifxtableifoutbroadcastpkts {get { return GetParameter(1106); }set { SetParameter(1106, value); }}
	/// <summary>PID: 1107  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcinoctets_1107 {get { return GetParameter(1107); }set { SetParameter(1107, value); }}
	/// <summary>PID: 1107  | Type: read</summary>
	public System.Object Ifxtableifhcinoctets {get { return GetParameter(1107); }set { SetParameter(1107, value); }}
	/// <summary>PID: 1108  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcinucastpkts_1108 {get { return GetParameter(1108); }set { SetParameter(1108, value); }}
	/// <summary>PID: 1108  | Type: read</summary>
	public System.Object Ifxtableifhcinucastpkts {get { return GetParameter(1108); }set { SetParameter(1108, value); }}
	/// <summary>PID: 1109  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcinmulticastpkts_1109 {get { return GetParameter(1109); }set { SetParameter(1109, value); }}
	/// <summary>PID: 1109  | Type: read</summary>
	public System.Object Ifxtableifhcinmulticastpkts {get { return GetParameter(1109); }set { SetParameter(1109, value); }}
	/// <summary>PID: 1110  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcinbroadcastpkts_1110 {get { return GetParameter(1110); }set { SetParameter(1110, value); }}
	/// <summary>PID: 1110  | Type: read</summary>
	public System.Object Ifxtableifhcinbroadcastpkts {get { return GetParameter(1110); }set { SetParameter(1110, value); }}
	/// <summary>PID: 1111  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcoutoctets_1111 {get { return GetParameter(1111); }set { SetParameter(1111, value); }}
	/// <summary>PID: 1111  | Type: read</summary>
	public System.Object Ifxtableifhcoutoctets {get { return GetParameter(1111); }set { SetParameter(1111, value); }}
	/// <summary>PID: 1112  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcoutucastpkts_1112 {get { return GetParameter(1112); }set { SetParameter(1112, value); }}
	/// <summary>PID: 1112  | Type: read</summary>
	public System.Object Ifxtableifhcoutucastpkts {get { return GetParameter(1112); }set { SetParameter(1112, value); }}
	/// <summary>PID: 1113  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcoutmulticastpkts_1113 {get { return GetParameter(1113); }set { SetParameter(1113, value); }}
	/// <summary>PID: 1113  | Type: read</summary>
	public System.Object Ifxtableifhcoutmulticastpkts {get { return GetParameter(1113); }set { SetParameter(1113, value); }}
	/// <summary>PID: 1114  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcoutbroadcastpkts_1114 {get { return GetParameter(1114); }set { SetParameter(1114, value); }}
	/// <summary>PID: 1114  | Type: read</summary>
	public System.Object Ifxtableifhcoutbroadcastpkts {get { return GetParameter(1114); }set { SetParameter(1114, value); }}
	/// <summary>PID: 1115  | Type: read | DISCREETS: Enabled = 1, Disabled = 2</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableiflinkupdowntrapenable_1115 {get { return GetParameter(1115); }set { SetParameter(1115, value); }}
	/// <summary>PID: 1115  | Type: read | DISCREETS: Enabled = 1, Disabled = 2</summary>
	public System.Object Ifxtableiflinkupdowntrapenable {get { return GetParameter(1115); }set { SetParameter(1115, value); }}
	/// <summary>PID: 1116  | Type: read | EXCEPTIONS: N/A = 0</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhighspeed_1116 {get { return GetParameter(1116); }set { SetParameter(1116, value); }}
	/// <summary>PID: 1116  | Type: read | EXCEPTIONS: N/A = 0</summary>
	public System.Object Ifxtableifhighspeed {get { return GetParameter(1116); }set { SetParameter(1116, value); }}
	/// <summary>PID: 1117  | Type: read | DISCREETS: True = 1, False = 2</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifpromiscuousmode_1117 {get { return GetParameter(1117); }set { SetParameter(1117, value); }}
	/// <summary>PID: 1117  | Type: read | DISCREETS: True = 1, False = 2</summary>
	public System.Object Ifxtableifpromiscuousmode {get { return GetParameter(1117); }set { SetParameter(1117, value); }}
	/// <summary>PID: 1118  | Type: read | DISCREETS: True = 1, False = 2</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifconnectorpresent_1118 {get { return GetParameter(1118); }set { SetParameter(1118, value); }}
	/// <summary>PID: 1118  | Type: read | DISCREETS: True = 1, False = 2</summary>
	public System.Object Ifxtableifconnectorpresent {get { return GetParameter(1118); }set { SetParameter(1118, value); }}
	/// <summary>PID: 1119  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifalias_1119 {get { return GetParameter(1119); }set { SetParameter(1119, value); }}
	/// <summary>PID: 1119  | Type: read</summary>
	public System.Object Ifxtableifalias {get { return GetParameter(1119); }set { SetParameter(1119, value); }}
	/// <summary>PID: 1120  | Type: read | EXCEPTIONS: No Discontinuity = 0</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifcounterdiscontinuitytime_1120 {get { return GetParameter(1120); }set { SetParameter(1120, value); }}
	/// <summary>PID: 1120  | Type: read | EXCEPTIONS: No Discontinuity = 0</summary>
	public System.Object Ifxtableifcounterdiscontinuitytime {get { return GetParameter(1120); }set { SetParameter(1120, value); }}
	/// <summary>PID: 1121  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifinbitrate_1121 {get { return GetParameter(1121); }set { SetParameter(1121, value); }}
	/// <summary>PID: 1121  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Ifxtableifinbitrate {get { return GetParameter(1121); }set { SetParameter(1121, value); }}
	/// <summary>PID: 1122  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifoutbitrate_1122 {get { return GetParameter(1122); }set { SetParameter(1122, value); }}
	/// <summary>PID: 1122  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Ifxtableifoutbitrate {get { return GetParameter(1122); }set { SetParameter(1122, value); }}
	/// <summary>PID: 1123  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifbandwidthutilization_1123 {get { return GetParameter(1123); }set { SetParameter(1123, value); }}
	/// <summary>PID: 1123  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Ifxtableifbandwidthutilization {get { return GetParameter(1123); }set { SetParameter(1123, value); }}
	/// <summary>PID: 1124  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifratedata_1124 {get { return GetParameter(1124); }set { SetParameter(1124, value); }}
	/// <summary>PID: 1124  | Type: read</summary>
	public System.Object Ifxtableifratedata {get { return GetParameter(1124); }set { SetParameter(1124, value); }}
	/// <summary>PID: 1155  | Type: write | DISCREETS: Enabled = 1, Disabled = 2</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableiflinkupdowntrapenable_1155 {get { return GetParameter(1155); }set { SetParameter(1155, value); }}
	/// <summary>PID: 1157  | Type: write | DISCREETS: True = 1, False = 2</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifpromiscuousmode_1157 {get { return GetParameter(1157); }set { SetParameter(1157, value); }}
	/// <summary>PID: 1159  | Type: write</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifalias_1159 {get { return GetParameter(1159); }set { SetParameter(1159, value); }}
	/// <summary>PID: 1190  | Type: write | DISCREETS: Raw Tables... = Raw Tables</summary>
	public System.Object Interfacesrawtablespagebutton_1190 {get { return GetParameter(1190); }set { SetParameter(1190, value); }}
	/// <summary>PID: 1190  | Type: write | DISCREETS: Raw Tables... = Raw Tables</summary>
	public System.Object Interfacesrawtablespagebutton {get { return Write.Interfacesrawtablespagebutton; }set { Write.Interfacesrawtablespagebutton = value; }}
	/// <summary>PID: 1191  | Type: dummy</summary>
	public System.Object Interfacestablemerge_dummy {get { return GetParameter(1191); }set { SetParameter(1191, value); }}
	/// <summary>PID: 1192  | Type: read | DISCREETS: Fast = 1, Accurate = 2</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesratecalculationsmethod_1192 {get { return GetParameter(1192); }set { SetParameter(1192, value); }}
	/// <summary>PID: 1192  | Type: read | DISCREETS: Fast = 1, Accurate = 2</summary>
	public System.Object Interfacesratecalculationsmethod {get { return GetParameter(1192); }set { SetParameter(1192, value); }}
	/// <summary>PID: 1193  | Type: write | DISCREETS: Fast = 1, Accurate = 2</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesratecalculationsmethod_1193 {get { return GetParameter(1193); }set { SetParameter(1193, value); }}
	/// <summary>PID: 1199  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesdisplaykey_1199 {get { return GetParameter(1199); }set { SetParameter(1199, value); }}
	/// <summary>PID: 1199  | Type: read</summary>
	public System.Object Interfacesdisplaykey {get { return GetParameter(1199); }set { SetParameter(1199, value); }}
	/// <summary>PID: 1201  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesindex_1201 {get { return GetParameter(1201); }set { SetParameter(1201, value); }}
	/// <summary>PID: 1201  | Type: read</summary>
	public System.Object Interfacesindex {get { return GetParameter(1201); }set { SetParameter(1201, value); }}
	/// <summary>PID: 1202  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesdescr_1202 {get { return GetParameter(1202); }set { SetParameter(1202, value); }}
	/// <summary>PID: 1202  | Type: read</summary>
	public System.Object Interfacesdescr {get { return GetParameter(1202); }set { SetParameter(1202, value); }}
	/// <summary>PID: 1203  | Type: read | DISCREETS: Other = 1, Regular 1822 = 2, HDH 1822 = 3, DDN X 25 = 4, RFC 877 X.25 = 5, Ethernet CSMACD = 6, ISO 8802.3 CSMA/CD = 7, ISO 8802.4 Token Bus = 8, ISO 8802.5 Token Ring = 9, ISO 8802.6 MAN = 10, Star LAN = 11, PROTEON 10 Mb = 12, PROTEON 80 Mb = 13, HYPERchannel = 14, FDDI = 15, LAPB = 16, SDLC = 17, DS1 = 18, E1 = 19, Basic ISDN = 20, Primary ISDN = 21, Proprietary Point to Point Serial = 22, PPP = 23, Software Loopback = 24, EON = 25, Ethernet 3 Mb = 26, NSIP = 27, SlIP = 28, Ultra = 29, DS3 = 30, SIP = 31, Frame Relay = 32, RS-232 = 33, Parallel Port = 34, ARCNET = 35, ARCNET Plus = 36, ATM = 37, MIOX 25 = 38, SONET = 39, X.25 PLE = 40, ISO 8802.2 LLC = 41, Local Talk = 42, SMDS DXI = 43, Frame Relay Service = 44, V.35 = 45, HSSI = 46, HIPPI = 47, Modem = 48, AAL5 = 49, SONET Path = 50, SONET VT = 51, SMDS ICIP = 52, Proprietary Virtual = 53, Proprietary Multiplexor = 54, IEEE 802.12 = 55, Fiber Channel = 56, HIPPI Interface = 57, Frame Relay Interconnect = 58, AFLANE 802.3 = 59, AFLANE 802.5 = 60, CCT Emulated = 61, Fast Ether = 62, ISDN = 63, V.11 = 64, V.36 = 65, G.703 at 64kbps = 66, G.703 at 2 Mbps = 67, QLLC = 68, Fast Ether FX = 69, Channel = 70, IEEE 802.11 = 71, IBM System 360/370 Channel = 72, ESCON = 73, DLSW = 74, ISDN S/T Interface = 75, ISDN U Interface = 76, LAPD = 77, IP Switch = 78, RSRB = 79, ATM Logical = 80, DS0 = 81, DS0 Bundle = 82, Bisynchronous Protocol = 83, Asynchronous Protocol = 84, CNR = 85, ISO 8802.5 DTR = 86, EPLRS = 87, ARAP = 88, Proprietary CNLS = 89, Host PAD = 90, Term PAD = 91, Frame Relay MPI = 92, X.213 = 93, ADSL = 94, RADSL = 95, SDSL = 96, VDSL = 97, ISO 8802.5 CRFP Int = 98, Myrinet = 99, Voice EM = 100, Voice FXO = 101, Voice FXS = 102, Voice ENCAP = 103, Voice over IP = 104, ATM DXI = 105, ATM FUNI = 106, ATM IMA = 107, PPP Multilink Bundle = 108, IP over CDLC = 109, IP over Claw = 110, Stack to Stack = 111, Virtual IP Address = 112, MPC = 113, IP over ATM = 114, ISO 8802.5 Fiber = 115, TDLC = 116, Gigabit Ethernet = 117, HDLC = 118, LAPF = 119, V.37 = 120, X.25 MLP = 121, X.25 Hunt Group = 122, Transparent HDLC = 123, Interleave Channel = 124, Fast Channel = 125, IP = 126, DOCS Cable MAC Layer = 127, DOCS Cable Downstream = 128, Docs Cable Upstream = 129, A 12 MPP Switch = 130, Tunnel = 131, Coffee = 132, CES = 133, ATM Sub Interface = 134, L2 VLAN = 135, L3 IP VLAN = 136, L3 IPC VLAN = 137, Digital Powerline = 138, Media Mail over IP = 139, DTM = 140, DCN = 141, IP Forward = 142, MSDSL = 143, IEEE 1394 = 144, If GSN = 145, DVB-RCC MAC Layer = 146, DVB-RCC Downstream = 147, DVB-RCC Upstream = 148, ATM Virtual = 149, MPLS Tunnel = 150, SRP = 151, Voice over ATM = 152, Voice over Frame Relay = 153, IDSL = 154, Composite Link = 155, SS7 Signaling Link = 156, Proprietary Wireless P2P = 157, Frame Forward = 158, RFC 1483 = 159, USB = 160, IEEE 802.3ad Link Aggregate = 161, BGP Policy Accounting = 162, FRF.16 MFR Bundle = 163, H.323 Gatekeeper = 164, H.323 Proxy = 165, MPLS = 166, MF Signaling Link = 167, HDSL2 = 168, SHDSL = 169, DS1 FDL = 170, Packet over SONET/SDH = 171, DVB ASI In = 172, DVB ASI Out = 173, PLC = 174, NFAS = 175, TR008 = 176, GR-303 RDT = 177, GR-303 IDT = 178, ISUP = 179, Proprietary DOCs Wireless MAC Layer = 180, Proprietary DOCS Wireless Downstream = 181, Proprietary DOCS Wireless Upstream = 182, HiperLAN 2 = 183, Proprietary BW AP 2 Mp = 184, SONET Overhead Channel = 185, Digital Wrapper Overhead Channel = 186, AAL2 = 187, Radio MAC = 188, ATM Radio = 189, IMT = 190, MVL = 191, Reach DSL = 192, FR DLCI End Point = 193, ATM VCI End Point = 194, Optical Channel = 195, Optical Transport = 196, Proprietary ATM = 197, Voice over Cable = 198, Infiniband = 199, TE Link = 200, Q.2931 = 201, Virtual Trunk Group = 202, SIP Trunk Group = 203, SIP Signaling = 204, DOCS Cable Upstream Channel = 205, Econet = 206, PON 155 = 207, PON 622 = 208, Bridge = 209, Line Group = 210, Voice EMFGD = 211, Voice FGDEANA = 212, Voice DID = 213, MPEG Transport = 214, 6to4 = 215, GTP = 216, PDN Ether Loop 1 = 217, PDN Ether Loop 2 = 218, Optical Channel Group = 219, HomePNA = 220, GFP = 221, CISCO IS LVLAN = 222, Actelis Meta LOOP = 223, FCIP Link = 224, RPR = 225, QAM = 226, LMP = 227, CBL Vecta Star = 228, DOCS Cable Modular CMTS Downstream = 229, ADSL2 = 230, MAC Sec Controlled IF = 231, MAC Sec Uncontrolled IF = 232, AVICI Optical Ether = 233, ATMBond = 234, Voice FGD Operator Service = 235, MoCA Version 1 = 236, IEEE 802.16 WMAN = 237, ADSL2+ = 238, DVB-RCS MAC Layer = 239, DVB Satellite TDM = 240, DVB-RCS TDMA = 241, X.86 Laps = 242, WWAN PP = 243, WWAN PP2 = 244, Voice EBS = 245, If PW Type = 246, ILAN = 247, PIP = 248, ALU ELP = 249, G-PON = 250, VDSL2 = 251, CAPWAP Dot 11 Profile = 252, CAPWAP Dot 11 BSS = 253, CAPWAP WTP Virtual Radio = 254, Bits = 255, DOCSIS CATV Upstream RF Port = 256, CATV Downstream RF Port = 257, VMWare Virtual NIC = 258, IEEE 802.15 4 WPAN = 259, OTN ODU = 260, OTN OTU = 261, If VFI Type = 262, G.998.1 = 263, G.998.2 = 264, G.998.3 = 265, ALU EPON = 266, ALU EPON ONU = 267, ALU EPON Physical Unit = 268, ALU EPON Logical Link = 269, ALU GPON ONU = 270, ALU GPON Physical Unit = 271, VMWare NIC Team = 272, DOCS OFDM Downstream = 277, DOCS OFDMA Upstream = 278, G.fast Port = 279, SDCI = 280, Xbox Wireless = 281, FastDSL = 282, Cable SCTE 55-1 OOB Forward Channel = 283, Cable SCTE 55-1 OOB Return Channel = 284, Cable SCTE 55-2 OOB Downstream Channel = 285, Cable SCTE 55-2 OOB Upstream Channel = 286, DOCS Cable NDF = 287, DOCS Cable NDR = 288, PTM = 289, GHN = 290, OTN OTSI = 291, OTN OTUC = 292, OTN ODUC = 293, OTN OTUC Signal = 294</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacestype_1203 {get { return GetParameter(1203); }set { SetParameter(1203, value); }}
	/// <summary>PID: 1203  | Type: read | DISCREETS: Other = 1, Regular 1822 = 2, HDH 1822 = 3, DDN X 25 = 4, RFC 877 X.25 = 5, Ethernet CSMACD = 6, ISO 8802.3 CSMA/CD = 7, ISO 8802.4 Token Bus = 8, ISO 8802.5 Token Ring = 9, ISO 8802.6 MAN = 10, Star LAN = 11, PROTEON 10 Mb = 12, PROTEON 80 Mb = 13, HYPERchannel = 14, FDDI = 15, LAPB = 16, SDLC = 17, DS1 = 18, E1 = 19, Basic ISDN = 20, Primary ISDN = 21, Proprietary Point to Point Serial = 22, PPP = 23, Software Loopback = 24, EON = 25, Ethernet 3 Mb = 26, NSIP = 27, SlIP = 28, Ultra = 29, DS3 = 30, SIP = 31, Frame Relay = 32, RS-232 = 33, Parallel Port = 34, ARCNET = 35, ARCNET Plus = 36, ATM = 37, MIOX 25 = 38, SONET = 39, X.25 PLE = 40, ISO 8802.2 LLC = 41, Local Talk = 42, SMDS DXI = 43, Frame Relay Service = 44, V.35 = 45, HSSI = 46, HIPPI = 47, Modem = 48, AAL5 = 49, SONET Path = 50, SONET VT = 51, SMDS ICIP = 52, Proprietary Virtual = 53, Proprietary Multiplexor = 54, IEEE 802.12 = 55, Fiber Channel = 56, HIPPI Interface = 57, Frame Relay Interconnect = 58, AFLANE 802.3 = 59, AFLANE 802.5 = 60, CCT Emulated = 61, Fast Ether = 62, ISDN = 63, V.11 = 64, V.36 = 65, G.703 at 64kbps = 66, G.703 at 2 Mbps = 67, QLLC = 68, Fast Ether FX = 69, Channel = 70, IEEE 802.11 = 71, IBM System 360/370 Channel = 72, ESCON = 73, DLSW = 74, ISDN S/T Interface = 75, ISDN U Interface = 76, LAPD = 77, IP Switch = 78, RSRB = 79, ATM Logical = 80, DS0 = 81, DS0 Bundle = 82, Bisynchronous Protocol = 83, Asynchronous Protocol = 84, CNR = 85, ISO 8802.5 DTR = 86, EPLRS = 87, ARAP = 88, Proprietary CNLS = 89, Host PAD = 90, Term PAD = 91, Frame Relay MPI = 92, X.213 = 93, ADSL = 94, RADSL = 95, SDSL = 96, VDSL = 97, ISO 8802.5 CRFP Int = 98, Myrinet = 99, Voice EM = 100, Voice FXO = 101, Voice FXS = 102, Voice ENCAP = 103, Voice over IP = 104, ATM DXI = 105, ATM FUNI = 106, ATM IMA = 107, PPP Multilink Bundle = 108, IP over CDLC = 109, IP over Claw = 110, Stack to Stack = 111, Virtual IP Address = 112, MPC = 113, IP over ATM = 114, ISO 8802.5 Fiber = 115, TDLC = 116, Gigabit Ethernet = 117, HDLC = 118, LAPF = 119, V.37 = 120, X.25 MLP = 121, X.25 Hunt Group = 122, Transparent HDLC = 123, Interleave Channel = 124, Fast Channel = 125, IP = 126, DOCS Cable MAC Layer = 127, DOCS Cable Downstream = 128, Docs Cable Upstream = 129, A 12 MPP Switch = 130, Tunnel = 131, Coffee = 132, CES = 133, ATM Sub Interface = 134, L2 VLAN = 135, L3 IP VLAN = 136, L3 IPC VLAN = 137, Digital Powerline = 138, Media Mail over IP = 139, DTM = 140, DCN = 141, IP Forward = 142, MSDSL = 143, IEEE 1394 = 144, If GSN = 145, DVB-RCC MAC Layer = 146, DVB-RCC Downstream = 147, DVB-RCC Upstream = 148, ATM Virtual = 149, MPLS Tunnel = 150, SRP = 151, Voice over ATM = 152, Voice over Frame Relay = 153, IDSL = 154, Composite Link = 155, SS7 Signaling Link = 156, Proprietary Wireless P2P = 157, Frame Forward = 158, RFC 1483 = 159, USB = 160, IEEE 802.3ad Link Aggregate = 161, BGP Policy Accounting = 162, FRF.16 MFR Bundle = 163, H.323 Gatekeeper = 164, H.323 Proxy = 165, MPLS = 166, MF Signaling Link = 167, HDSL2 = 168, SHDSL = 169, DS1 FDL = 170, Packet over SONET/SDH = 171, DVB ASI In = 172, DVB ASI Out = 173, PLC = 174, NFAS = 175, TR008 = 176, GR-303 RDT = 177, GR-303 IDT = 178, ISUP = 179, Proprietary DOCs Wireless MAC Layer = 180, Proprietary DOCS Wireless Downstream = 181, Proprietary DOCS Wireless Upstream = 182, HiperLAN 2 = 183, Proprietary BW AP 2 Mp = 184, SONET Overhead Channel = 185, Digital Wrapper Overhead Channel = 186, AAL2 = 187, Radio MAC = 188, ATM Radio = 189, IMT = 190, MVL = 191, Reach DSL = 192, FR DLCI End Point = 193, ATM VCI End Point = 194, Optical Channel = 195, Optical Transport = 196, Proprietary ATM = 197, Voice over Cable = 198, Infiniband = 199, TE Link = 200, Q.2931 = 201, Virtual Trunk Group = 202, SIP Trunk Group = 203, SIP Signaling = 204, DOCS Cable Upstream Channel = 205, Econet = 206, PON 155 = 207, PON 622 = 208, Bridge = 209, Line Group = 210, Voice EMFGD = 211, Voice FGDEANA = 212, Voice DID = 213, MPEG Transport = 214, 6to4 = 215, GTP = 216, PDN Ether Loop 1 = 217, PDN Ether Loop 2 = 218, Optical Channel Group = 219, HomePNA = 220, GFP = 221, CISCO IS LVLAN = 222, Actelis Meta LOOP = 223, FCIP Link = 224, RPR = 225, QAM = 226, LMP = 227, CBL Vecta Star = 228, DOCS Cable Modular CMTS Downstream = 229, ADSL2 = 230, MAC Sec Controlled IF = 231, MAC Sec Uncontrolled IF = 232, AVICI Optical Ether = 233, ATMBond = 234, Voice FGD Operator Service = 235, MoCA Version 1 = 236, IEEE 802.16 WMAN = 237, ADSL2+ = 238, DVB-RCS MAC Layer = 239, DVB Satellite TDM = 240, DVB-RCS TDMA = 241, X.86 Laps = 242, WWAN PP = 243, WWAN PP2 = 244, Voice EBS = 245, If PW Type = 246, ILAN = 247, PIP = 248, ALU ELP = 249, G-PON = 250, VDSL2 = 251, CAPWAP Dot 11 Profile = 252, CAPWAP Dot 11 BSS = 253, CAPWAP WTP Virtual Radio = 254, Bits = 255, DOCSIS CATV Upstream RF Port = 256, CATV Downstream RF Port = 257, VMWare Virtual NIC = 258, IEEE 802.15 4 WPAN = 259, OTN ODU = 260, OTN OTU = 261, If VFI Type = 262, G.998.1 = 263, G.998.2 = 264, G.998.3 = 265, ALU EPON = 266, ALU EPON ONU = 267, ALU EPON Physical Unit = 268, ALU EPON Logical Link = 269, ALU GPON ONU = 270, ALU GPON Physical Unit = 271, VMWare NIC Team = 272, DOCS OFDM Downstream = 277, DOCS OFDMA Upstream = 278, G.fast Port = 279, SDCI = 280, Xbox Wireless = 281, FastDSL = 282, Cable SCTE 55-1 OOB Forward Channel = 283, Cable SCTE 55-1 OOB Return Channel = 284, Cable SCTE 55-2 OOB Downstream Channel = 285, Cable SCTE 55-2 OOB Upstream Channel = 286, DOCS Cable NDF = 287, DOCS Cable NDR = 288, PTM = 289, GHN = 290, OTN OTSI = 291, OTN OTUC = 292, OTN ODUC = 293, OTN OTUC Signal = 294</summary>
	public System.Object Interfacestype {get { return GetParameter(1203); }set { SetParameter(1203, value); }}
	/// <summary>PID: 1204  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesmtu_1204 {get { return GetParameter(1204); }set { SetParameter(1204, value); }}
	/// <summary>PID: 1204  | Type: read</summary>
	public System.Object Interfacesmtu {get { return GetParameter(1204); }set { SetParameter(1204, value); }}
	/// <summary>PID: 1205  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesspeed_1205 {get { return GetParameter(1205); }set { SetParameter(1205, value); }}
	/// <summary>PID: 1205  | Type: read</summary>
	public System.Object Interfacesspeed {get { return GetParameter(1205); }set { SetParameter(1205, value); }}
	/// <summary>PID: 1206  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesphysaddress_1206 {get { return GetParameter(1206); }set { SetParameter(1206, value); }}
	/// <summary>PID: 1206  | Type: read</summary>
	public System.Object Interfacesphysaddress {get { return GetParameter(1206); }set { SetParameter(1206, value); }}
	/// <summary>PID: 1207  | Type: read | DISCREETS: Up = 1, Down = 2, Testing = 3</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesadminstatus_1207 {get { return GetParameter(1207); }set { SetParameter(1207, value); }}
	/// <summary>PID: 1207  | Type: read | DISCREETS: Up = 1, Down = 2, Testing = 3</summary>
	public System.Object Interfacesadminstatus {get { return GetParameter(1207); }set { SetParameter(1207, value); }}
	/// <summary>PID: 1208  | Type: read | DISCREETS: Up = 1, Down = 2, Testing = 3, Unknown = 4, Dormant = 5, Not Present = 6, Lower Layer Down = 7</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesoperstatus_1208 {get { return GetParameter(1208); }set { SetParameter(1208, value); }}
	/// <summary>PID: 1208  | Type: read | DISCREETS: Up = 1, Down = 2, Testing = 3, Unknown = 4, Dormant = 5, Not Present = 6, Lower Layer Down = 7</summary>
	public System.Object Interfacesoperstatus {get { return GetParameter(1208); }set { SetParameter(1208, value); }}
	/// <summary>PID: 1209  | Type: read | EXCEPTIONS: No Change = 0</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfaceslastchange_1209 {get { return GetParameter(1209); }set { SetParameter(1209, value); }}
	/// <summary>PID: 1209  | Type: read | EXCEPTIONS: No Change = 0</summary>
	public System.Object Interfaceslastchange {get { return GetParameter(1209); }set { SetParameter(1209, value); }}
	/// <summary>PID: 1210  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesinoctets_1210 {get { return GetParameter(1210); }set { SetParameter(1210, value); }}
	/// <summary>PID: 1210  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Interfacesinoctets {get { return GetParameter(1210); }set { SetParameter(1210, value); }}
	/// <summary>PID: 1211  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesinucastpkts_1211 {get { return GetParameter(1211); }set { SetParameter(1211, value); }}
	/// <summary>PID: 1211  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Interfacesinucastpkts {get { return GetParameter(1211); }set { SetParameter(1211, value); }}
	/// <summary>PID: 1212  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesindiscards_1212 {get { return GetParameter(1212); }set { SetParameter(1212, value); }}
	/// <summary>PID: 1212  | Type: read</summary>
	public System.Object Interfacesindiscards {get { return GetParameter(1212); }set { SetParameter(1212, value); }}
	/// <summary>PID: 1213  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesinerrors_1213 {get { return GetParameter(1213); }set { SetParameter(1213, value); }}
	/// <summary>PID: 1213  | Type: read</summary>
	public System.Object Interfacesinerrors {get { return GetParameter(1213); }set { SetParameter(1213, value); }}
	/// <summary>PID: 1214  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesinunknownprotos_1214 {get { return GetParameter(1214); }set { SetParameter(1214, value); }}
	/// <summary>PID: 1214  | Type: read</summary>
	public System.Object Interfacesinunknownprotos {get { return GetParameter(1214); }set { SetParameter(1214, value); }}
	/// <summary>PID: 1215  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesoutoctets_1215 {get { return GetParameter(1215); }set { SetParameter(1215, value); }}
	/// <summary>PID: 1215  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Interfacesoutoctets {get { return GetParameter(1215); }set { SetParameter(1215, value); }}
	/// <summary>PID: 1216  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesoutucastpkts_1216 {get { return GetParameter(1216); }set { SetParameter(1216, value); }}
	/// <summary>PID: 1216  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Interfacesoutucastpkts {get { return GetParameter(1216); }set { SetParameter(1216, value); }}
	/// <summary>PID: 1217  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesoutdiscards_1217 {get { return GetParameter(1217); }set { SetParameter(1217, value); }}
	/// <summary>PID: 1217  | Type: read</summary>
	public System.Object Interfacesoutdiscards {get { return GetParameter(1217); }set { SetParameter(1217, value); }}
	/// <summary>PID: 1218  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesouterrors_1218 {get { return GetParameter(1218); }set { SetParameter(1218, value); }}
	/// <summary>PID: 1218  | Type: read</summary>
	public System.Object Interfacesouterrors {get { return GetParameter(1218); }set { SetParameter(1218, value); }}
	/// <summary>PID: 1219  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesinbitrate_1219 {get { return GetParameter(1219); }set { SetParameter(1219, value); }}
	/// <summary>PID: 1219  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Interfacesinbitrate {get { return GetParameter(1219); }set { SetParameter(1219, value); }}
	/// <summary>PID: 1220  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesoutbitrate_1220 {get { return GetParameter(1220); }set { SetParameter(1220, value); }}
	/// <summary>PID: 1220  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Interfacesoutbitrate {get { return GetParameter(1220); }set { SetParameter(1220, value); }}
	/// <summary>PID: 1221  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesinmulticastpkts_1221 {get { return GetParameter(1221); }set { SetParameter(1221, value); }}
	/// <summary>PID: 1221  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Interfacesinmulticastpkts {get { return GetParameter(1221); }set { SetParameter(1221, value); }}
	/// <summary>PID: 1222  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesinbroadcastpkts_1222 {get { return GetParameter(1222); }set { SetParameter(1222, value); }}
	/// <summary>PID: 1222  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Interfacesinbroadcastpkts {get { return GetParameter(1222); }set { SetParameter(1222, value); }}
	/// <summary>PID: 1223  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesoutmulticastpkts_1223 {get { return GetParameter(1223); }set { SetParameter(1223, value); }}
	/// <summary>PID: 1223  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Interfacesoutmulticastpkts {get { return GetParameter(1223); }set { SetParameter(1223, value); }}
	/// <summary>PID: 1224  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesoutbroadcastpkts_1224 {get { return GetParameter(1224); }set { SetParameter(1224, value); }}
	/// <summary>PID: 1224  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Interfacesoutbroadcastpkts {get { return GetParameter(1224); }set { SetParameter(1224, value); }}
	/// <summary>PID: 1225  | Type: read | DISCREETS: True = 1, False = 2 | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacespromiscuousmode_1225 {get { return GetParameter(1225); }set { SetParameter(1225, value); }}
	/// <summary>PID: 1225  | Type: read | DISCREETS: True = 1, False = 2 | EXCEPTIONS: N/A = -1</summary>
	public System.Object Interfacespromiscuousmode {get { return GetParameter(1225); }set { SetParameter(1225, value); }}
	/// <summary>PID: 1226  | Type: read | DISCREETS: Present = 1, None = 2 | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesphysicalconnector_1226 {get { return GetParameter(1226); }set { SetParameter(1226, value); }}
	/// <summary>PID: 1226  | Type: read | DISCREETS: Present = 1, None = 2 | EXCEPTIONS: N/A = -1</summary>
	public System.Object Interfacesphysicalconnector {get { return GetParameter(1226); }set { SetParameter(1226, value); }}
	/// <summary>PID: 1227  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesalias_1227 {get { return GetParameter(1227); }set { SetParameter(1227, value); }}
	/// <summary>PID: 1227  | Type: read</summary>
	public System.Object Interfacesalias {get { return GetParameter(1227); }set { SetParameter(1227, value); }}
	/// <summary>PID: 1228  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacescounterdiscontinuitytime_1228 {get { return GetParameter(1228); }set { SetParameter(1228, value); }}
	/// <summary>PID: 1228  | Type: read</summary>
	public System.Object Interfacescounterdiscontinuitytime {get { return GetParameter(1228); }set { SetParameter(1228, value); }}
	/// <summary>PID: 1229  | Type: read | DISCREETS: Enabled = 1, Disabled = 2</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfaceslinkupdowntrapenable_1229 {get { return GetParameter(1229); }set { SetParameter(1229, value); }}
	/// <summary>PID: 1229  | Type: read | DISCREETS: Enabled = 1, Disabled = 2</summary>
	public System.Object Interfaceslinkupdowntrapenable {get { return GetParameter(1229); }set { SetParameter(1229, value); }}
	/// <summary>PID: 1230  | Type: read | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesbandwidthutilization_1230 {get { return GetParameter(1230); }set { SetParameter(1230, value); }}
	/// <summary>PID: 1230  | Type: read | EXCEPTIONS: N/A = -1</summary>
	public System.Object Interfacesbandwidthutilization {get { return GetParameter(1230); }set { SetParameter(1230, value); }}
	/// <summary>PID: 1231  | Type: read | DISCREETS: Unknown = 1, Half Duplex = 2, Full Duplex = 3 | EXCEPTIONS: N/A = -1</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesduplexstatus_1231 {get { return GetParameter(1231); }set { SetParameter(1231, value); }}
	/// <summary>PID: 1231  | Type: read | DISCREETS: Unknown = 1, Half Duplex = 2, Full Duplex = 3 | EXCEPTIONS: N/A = -1</summary>
	public System.Object Interfacesduplexstatus {get { return GetParameter(1231); }set { SetParameter(1231, value); }}
	/// <summary>PID: 1257  | Type: write | DISCREETS: Up = 1, Down = 2, Testing = 3</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesadminstatus_1257 {get { return GetParameter(1257); }set { SetParameter(1257, value); }}
	/// <summary>PID: 1275  | Type: write | DISCREETS: True = 1, False = 2</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacespromiscuousmode_1275 {get { return GetParameter(1275); }set { SetParameter(1275, value); }}
	/// <summary>PID: 1277  | Type: write</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesalias_1277 {get { return GetParameter(1277); }set { SetParameter(1277, value); }}
	/// <summary>PID: 1279  | Type: write | DISCREETS: Enabled = 1, Disabled = 2</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfaceslinkupdowntrapenable_1279 {get { return GetParameter(1279); }set { SetParameter(1279, value); }}
	/// <summary>PID: 1301  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Dot3statsindex_1301 {get { return GetParameter(1301); }set { SetParameter(1301, value); }}
	/// <summary>PID: 1301  | Type: read</summary>
	public System.Object Dot3statsindex {get { return GetParameter(1301); }set { SetParameter(1301, value); }}
	/// <summary>PID: 1302  | Type: read | DISCREETS: Unknown = 1, Half Duplex = 2, Full Duplex = 3</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Dot3statsduplexstatus_1302 {get { return GetParameter(1302); }set { SetParameter(1302, value); }}
	/// <summary>PID: 1302  | Type: read | DISCREETS: Unknown = 1, Half Duplex = 2, Full Duplex = 3</summary>
	public System.Object Dot3statsduplexstatus {get { return GetParameter(1302); }set { SetParameter(1302, value); }}
	public WriteParameters Write { get; set; }
	public ConcreteSLProtocolExt()
	{
		iftable = new IftableQActionTable(this, 1000, "iftable");
		ifxtable = new IfxtableQActionTable(this, 1100, "ifxtable");
		interfaces = new InterfacesQActionTable(this, 1200, "interfaces");
		dot3statstable = new Dot3statstableQActionTable(this, 1300, "dot3statstable");
		Write = new WriteParameters(this);
	}
}
/// <summary>IDX: 0</summary>
public class IftableQActionTable : QActionTable, IEnumerable<IftableQActionRow>
{
	public IftableQActionTable(SLProtocol protocol, int tableId, string tableName) : base(protocol, tableId, tableName) { }
	IEnumerator IEnumerable.GetEnumerator() { return (IEnumerator) GetEnumerator(); }
	public IEnumerator<IftableQActionRow> GetEnumerator() { return new QActionTableEnumerator<IftableQActionRow>(this); }
}
/// <summary>IDX: 0</summary>
public class IfxtableQActionTable : QActionTable, IEnumerable<IfxtableQActionRow>
{
	public IfxtableQActionTable(SLProtocol protocol, int tableId, string tableName) : base(protocol, tableId, tableName) { }
	IEnumerator IEnumerable.GetEnumerator() { return (IEnumerator) GetEnumerator(); }
	public IEnumerator<IfxtableQActionRow> GetEnumerator() { return new QActionTableEnumerator<IfxtableQActionRow>(this); }
}
/// <summary>IDX: 0</summary>
public class InterfacesQActionTable : QActionTable, IEnumerable<InterfacesQActionRow>
{
	public InterfacesQActionTable(SLProtocol protocol, int tableId, string tableName) : base(protocol, tableId, tableName) { }
	IEnumerator IEnumerable.GetEnumerator() { return (IEnumerator) GetEnumerator(); }
	public IEnumerator<InterfacesQActionRow> GetEnumerator() { return new QActionTableEnumerator<InterfacesQActionRow>(this); }
}
/// <summary>IDX: 0</summary>
public class Dot3statstableQActionTable : QActionTable, IEnumerable<Dot3statstableQActionRow>
{
	public Dot3statstableQActionTable(SLProtocol protocol, int tableId, string tableName) : base(protocol, tableId, tableName) { }
	IEnumerator IEnumerable.GetEnumerator() { return (IEnumerator) GetEnumerator(); }
	public IEnumerator<Dot3statstableQActionRow> GetEnumerator() { return new QActionTableEnumerator<Dot3statstableQActionRow>(this); }
}
/// <summary>IDX: 0</summary>
public class IftableQActionRow : QActionTableRow
{
	/// <summary>PID: 1001 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifindex_1001 { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1001 | Type: read</summary>
	public System.Object Iftableifindex { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1002 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifdescr_1002 { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 1002 | Type: read</summary>
	public System.Object Iftableifdescr { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 1003 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableiftype_1003 { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 1003 | Type: read</summary>
	public System.Object Iftableiftype { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 1004 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifmtu_1004 { get { if (base.Columns.ContainsKey(3)) { return base.Columns[3]; } else { return null; } } set { if (base.Columns.ContainsKey(3)) { base.Columns[3] = value; } else { base.Columns.Add(3, value); } } }
	/// <summary>PID: 1004 | Type: read</summary>
	public System.Object Iftableifmtu { get { if (base.Columns.ContainsKey(3)) { return base.Columns[3]; } else { return null; } } set { if (base.Columns.ContainsKey(3)) { base.Columns[3] = value; } else { base.Columns.Add(3, value); } } }
	/// <summary>PID: 1005 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifspeed_1005 { get { if (base.Columns.ContainsKey(4)) { return base.Columns[4]; } else { return null; } } set { if (base.Columns.ContainsKey(4)) { base.Columns[4] = value; } else { base.Columns.Add(4, value); } } }
	/// <summary>PID: 1005 | Type: read</summary>
	public System.Object Iftableifspeed { get { if (base.Columns.ContainsKey(4)) { return base.Columns[4]; } else { return null; } } set { if (base.Columns.ContainsKey(4)) { base.Columns[4] = value; } else { base.Columns.Add(4, value); } } }
	/// <summary>PID: 1006 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifphysaddress_1006 { get { if (base.Columns.ContainsKey(5)) { return base.Columns[5]; } else { return null; } } set { if (base.Columns.ContainsKey(5)) { base.Columns[5] = value; } else { base.Columns.Add(5, value); } } }
	/// <summary>PID: 1006 | Type: read</summary>
	public System.Object Iftableifphysaddress { get { if (base.Columns.ContainsKey(5)) { return base.Columns[5]; } else { return null; } } set { if (base.Columns.ContainsKey(5)) { base.Columns[5] = value; } else { base.Columns.Add(5, value); } } }
	/// <summary>PID: 1007 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifadminstatus_1007 { get { if (base.Columns.ContainsKey(6)) { return base.Columns[6]; } else { return null; } } set { if (base.Columns.ContainsKey(6)) { base.Columns[6] = value; } else { base.Columns.Add(6, value); } } }
	/// <summary>PID: 1007 | Type: read</summary>
	public System.Object Iftableifadminstatus { get { if (base.Columns.ContainsKey(6)) { return base.Columns[6]; } else { return null; } } set { if (base.Columns.ContainsKey(6)) { base.Columns[6] = value; } else { base.Columns.Add(6, value); } } }
	/// <summary>PID: 1008 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifoperstatus_1008 { get { if (base.Columns.ContainsKey(7)) { return base.Columns[7]; } else { return null; } } set { if (base.Columns.ContainsKey(7)) { base.Columns[7] = value; } else { base.Columns.Add(7, value); } } }
	/// <summary>PID: 1008 | Type: read</summary>
	public System.Object Iftableifoperstatus { get { if (base.Columns.ContainsKey(7)) { return base.Columns[7]; } else { return null; } } set { if (base.Columns.ContainsKey(7)) { base.Columns[7] = value; } else { base.Columns.Add(7, value); } } }
	/// <summary>PID: 1009 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableiflastchange_1009 { get { if (base.Columns.ContainsKey(8)) { return base.Columns[8]; } else { return null; } } set { if (base.Columns.ContainsKey(8)) { base.Columns[8] = value; } else { base.Columns.Add(8, value); } } }
	/// <summary>PID: 1009 | Type: read</summary>
	public System.Object Iftableiflastchange { get { if (base.Columns.ContainsKey(8)) { return base.Columns[8]; } else { return null; } } set { if (base.Columns.ContainsKey(8)) { base.Columns[8] = value; } else { base.Columns.Add(8, value); } } }
	/// <summary>PID: 1010 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifinoctets_1010 { get { if (base.Columns.ContainsKey(9)) { return base.Columns[9]; } else { return null; } } set { if (base.Columns.ContainsKey(9)) { base.Columns[9] = value; } else { base.Columns.Add(9, value); } } }
	/// <summary>PID: 1010 | Type: read</summary>
	public System.Object Iftableifinoctets { get { if (base.Columns.ContainsKey(9)) { return base.Columns[9]; } else { return null; } } set { if (base.Columns.ContainsKey(9)) { base.Columns[9] = value; } else { base.Columns.Add(9, value); } } }
	/// <summary>PID: 1011 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifinucastpkts_1011 { get { if (base.Columns.ContainsKey(10)) { return base.Columns[10]; } else { return null; } } set { if (base.Columns.ContainsKey(10)) { base.Columns[10] = value; } else { base.Columns.Add(10, value); } } }
	/// <summary>PID: 1011 | Type: read</summary>
	public System.Object Iftableifinucastpkts { get { if (base.Columns.ContainsKey(10)) { return base.Columns[10]; } else { return null; } } set { if (base.Columns.ContainsKey(10)) { base.Columns[10] = value; } else { base.Columns.Add(10, value); } } }
	/// <summary>PID: 1012 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifindiscards_1012 { get { if (base.Columns.ContainsKey(11)) { return base.Columns[11]; } else { return null; } } set { if (base.Columns.ContainsKey(11)) { base.Columns[11] = value; } else { base.Columns.Add(11, value); } } }
	/// <summary>PID: 1012 | Type: read</summary>
	public System.Object Iftableifindiscards { get { if (base.Columns.ContainsKey(11)) { return base.Columns[11]; } else { return null; } } set { if (base.Columns.ContainsKey(11)) { base.Columns[11] = value; } else { base.Columns.Add(11, value); } } }
	/// <summary>PID: 1013 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifinerrors_1013 { get { if (base.Columns.ContainsKey(12)) { return base.Columns[12]; } else { return null; } } set { if (base.Columns.ContainsKey(12)) { base.Columns[12] = value; } else { base.Columns.Add(12, value); } } }
	/// <summary>PID: 1013 | Type: read</summary>
	public System.Object Iftableifinerrors { get { if (base.Columns.ContainsKey(12)) { return base.Columns[12]; } else { return null; } } set { if (base.Columns.ContainsKey(12)) { base.Columns[12] = value; } else { base.Columns.Add(12, value); } } }
	/// <summary>PID: 1014 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifinunknownprotos_1014 { get { if (base.Columns.ContainsKey(13)) { return base.Columns[13]; } else { return null; } } set { if (base.Columns.ContainsKey(13)) { base.Columns[13] = value; } else { base.Columns.Add(13, value); } } }
	/// <summary>PID: 1014 | Type: read</summary>
	public System.Object Iftableifinunknownprotos { get { if (base.Columns.ContainsKey(13)) { return base.Columns[13]; } else { return null; } } set { if (base.Columns.ContainsKey(13)) { base.Columns[13] = value; } else { base.Columns.Add(13, value); } } }
	/// <summary>PID: 1015 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifoutoctets_1015 { get { if (base.Columns.ContainsKey(14)) { return base.Columns[14]; } else { return null; } } set { if (base.Columns.ContainsKey(14)) { base.Columns[14] = value; } else { base.Columns.Add(14, value); } } }
	/// <summary>PID: 1015 | Type: read</summary>
	public System.Object Iftableifoutoctets { get { if (base.Columns.ContainsKey(14)) { return base.Columns[14]; } else { return null; } } set { if (base.Columns.ContainsKey(14)) { base.Columns[14] = value; } else { base.Columns.Add(14, value); } } }
	/// <summary>PID: 1016 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifoutucastpkts_1016 { get { if (base.Columns.ContainsKey(15)) { return base.Columns[15]; } else { return null; } } set { if (base.Columns.ContainsKey(15)) { base.Columns[15] = value; } else { base.Columns.Add(15, value); } } }
	/// <summary>PID: 1016 | Type: read</summary>
	public System.Object Iftableifoutucastpkts { get { if (base.Columns.ContainsKey(15)) { return base.Columns[15]; } else { return null; } } set { if (base.Columns.ContainsKey(15)) { base.Columns[15] = value; } else { base.Columns.Add(15, value); } } }
	/// <summary>PID: 1017 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifoutdiscards_1017 { get { if (base.Columns.ContainsKey(16)) { return base.Columns[16]; } else { return null; } } set { if (base.Columns.ContainsKey(16)) { base.Columns[16] = value; } else { base.Columns.Add(16, value); } } }
	/// <summary>PID: 1017 | Type: read</summary>
	public System.Object Iftableifoutdiscards { get { if (base.Columns.ContainsKey(16)) { return base.Columns[16]; } else { return null; } } set { if (base.Columns.ContainsKey(16)) { base.Columns[16] = value; } else { base.Columns.Add(16, value); } } }
	/// <summary>PID: 1018 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifouterrors_1018 { get { if (base.Columns.ContainsKey(17)) { return base.Columns[17]; } else { return null; } } set { if (base.Columns.ContainsKey(17)) { base.Columns[17] = value; } else { base.Columns.Add(17, value); } } }
	/// <summary>PID: 1018 | Type: read</summary>
	public System.Object Iftableifouterrors { get { if (base.Columns.ContainsKey(17)) { return base.Columns[17]; } else { return null; } } set { if (base.Columns.ContainsKey(17)) { base.Columns[17] = value; } else { base.Columns.Add(17, value); } } }
	/// <summary>PID: 1019 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifinbitrate_1019 { get { if (base.Columns.ContainsKey(18)) { return base.Columns[18]; } else { return null; } } set { if (base.Columns.ContainsKey(18)) { base.Columns[18] = value; } else { base.Columns.Add(18, value); } } }
	/// <summary>PID: 1019 | Type: read</summary>
	public System.Object Iftableifinbitrate { get { if (base.Columns.ContainsKey(18)) { return base.Columns[18]; } else { return null; } } set { if (base.Columns.ContainsKey(18)) { base.Columns[18] = value; } else { base.Columns.Add(18, value); } } }
	/// <summary>PID: 1020 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifoutbitrate_1020 { get { if (base.Columns.ContainsKey(19)) { return base.Columns[19]; } else { return null; } } set { if (base.Columns.ContainsKey(19)) { base.Columns[19] = value; } else { base.Columns.Add(19, value); } } }
	/// <summary>PID: 1020 | Type: read</summary>
	public System.Object Iftableifoutbitrate { get { if (base.Columns.ContainsKey(19)) { return base.Columns[19]; } else { return null; } } set { if (base.Columns.ContainsKey(19)) { base.Columns[19] = value; } else { base.Columns.Add(19, value); } } }
	/// <summary>PID: 1021 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifbandwidthutilization_1021 { get { if (base.Columns.ContainsKey(20)) { return base.Columns[20]; } else { return null; } } set { if (base.Columns.ContainsKey(20)) { base.Columns[20] = value; } else { base.Columns.Add(20, value); } } }
	/// <summary>PID: 1021 | Type: read</summary>
	public System.Object Iftableifbandwidthutilization { get { if (base.Columns.ContainsKey(20)) { return base.Columns[20]; } else { return null; } } set { if (base.Columns.ContainsKey(20)) { base.Columns[20] = value; } else { base.Columns.Add(20, value); } } }
	/// <summary>PID: 1022 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Iftableifratedata_1022 { get { if (base.Columns.ContainsKey(21)) { return base.Columns[21]; } else { return null; } } set { if (base.Columns.ContainsKey(21)) { base.Columns[21] = value; } else { base.Columns.Add(21, value); } } }
	/// <summary>PID: 1022 | Type: read</summary>
	public System.Object Iftableifratedata { get { if (base.Columns.ContainsKey(21)) { return base.Columns[21]; } else { return null; } } set { if (base.Columns.ContainsKey(21)) { base.Columns[21] = value; } else { base.Columns.Add(21, value); } } }
	public IftableQActionRow() : base(0, 22) { }
	public IftableQActionRow(System.Object[] oRow) : base(0, 22, oRow) { }
	public static implicit operator IftableQActionRow(System.Object[] source) { return new IftableQActionRow(source); }
	public static implicit operator System.Object[](IftableQActionRow source) { return source.ToObjectArray(); }
}
/// <summary>IDX: 0</summary>
public class IfxtableQActionRow : QActionTableRow
{
	/// <summary>PID: 1101 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifindex_1101 { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1101 | Type: read</summary>
	public System.Object Ifxtableifindex { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1102 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifname_1102 { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 1102 | Type: read</summary>
	public System.Object Ifxtableifname { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 1103 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifinmulticastpkts_1103 { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 1103 | Type: read</summary>
	public System.Object Ifxtableifinmulticastpkts { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 1104 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifinbroadcastpkts_1104 { get { if (base.Columns.ContainsKey(3)) { return base.Columns[3]; } else { return null; } } set { if (base.Columns.ContainsKey(3)) { base.Columns[3] = value; } else { base.Columns.Add(3, value); } } }
	/// <summary>PID: 1104 | Type: read</summary>
	public System.Object Ifxtableifinbroadcastpkts { get { if (base.Columns.ContainsKey(3)) { return base.Columns[3]; } else { return null; } } set { if (base.Columns.ContainsKey(3)) { base.Columns[3] = value; } else { base.Columns.Add(3, value); } } }
	/// <summary>PID: 1105 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifoutmulticastpkts_1105 { get { if (base.Columns.ContainsKey(4)) { return base.Columns[4]; } else { return null; } } set { if (base.Columns.ContainsKey(4)) { base.Columns[4] = value; } else { base.Columns.Add(4, value); } } }
	/// <summary>PID: 1105 | Type: read</summary>
	public System.Object Ifxtableifoutmulticastpkts { get { if (base.Columns.ContainsKey(4)) { return base.Columns[4]; } else { return null; } } set { if (base.Columns.ContainsKey(4)) { base.Columns[4] = value; } else { base.Columns.Add(4, value); } } }
	/// <summary>PID: 1106 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifoutbroadcastpkts_1106 { get { if (base.Columns.ContainsKey(5)) { return base.Columns[5]; } else { return null; } } set { if (base.Columns.ContainsKey(5)) { base.Columns[5] = value; } else { base.Columns.Add(5, value); } } }
	/// <summary>PID: 1106 | Type: read</summary>
	public System.Object Ifxtableifoutbroadcastpkts { get { if (base.Columns.ContainsKey(5)) { return base.Columns[5]; } else { return null; } } set { if (base.Columns.ContainsKey(5)) { base.Columns[5] = value; } else { base.Columns.Add(5, value); } } }
	/// <summary>PID: 1107 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcinoctets_1107 { get { if (base.Columns.ContainsKey(6)) { return base.Columns[6]; } else { return null; } } set { if (base.Columns.ContainsKey(6)) { base.Columns[6] = value; } else { base.Columns.Add(6, value); } } }
	/// <summary>PID: 1107 | Type: read</summary>
	public System.Object Ifxtableifhcinoctets { get { if (base.Columns.ContainsKey(6)) { return base.Columns[6]; } else { return null; } } set { if (base.Columns.ContainsKey(6)) { base.Columns[6] = value; } else { base.Columns.Add(6, value); } } }
	/// <summary>PID: 1108 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcinucastpkts_1108 { get { if (base.Columns.ContainsKey(7)) { return base.Columns[7]; } else { return null; } } set { if (base.Columns.ContainsKey(7)) { base.Columns[7] = value; } else { base.Columns.Add(7, value); } } }
	/// <summary>PID: 1108 | Type: read</summary>
	public System.Object Ifxtableifhcinucastpkts { get { if (base.Columns.ContainsKey(7)) { return base.Columns[7]; } else { return null; } } set { if (base.Columns.ContainsKey(7)) { base.Columns[7] = value; } else { base.Columns.Add(7, value); } } }
	/// <summary>PID: 1109 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcinmulticastpkts_1109 { get { if (base.Columns.ContainsKey(8)) { return base.Columns[8]; } else { return null; } } set { if (base.Columns.ContainsKey(8)) { base.Columns[8] = value; } else { base.Columns.Add(8, value); } } }
	/// <summary>PID: 1109 | Type: read</summary>
	public System.Object Ifxtableifhcinmulticastpkts { get { if (base.Columns.ContainsKey(8)) { return base.Columns[8]; } else { return null; } } set { if (base.Columns.ContainsKey(8)) { base.Columns[8] = value; } else { base.Columns.Add(8, value); } } }
	/// <summary>PID: 1110 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcinbroadcastpkts_1110 { get { if (base.Columns.ContainsKey(9)) { return base.Columns[9]; } else { return null; } } set { if (base.Columns.ContainsKey(9)) { base.Columns[9] = value; } else { base.Columns.Add(9, value); } } }
	/// <summary>PID: 1110 | Type: read</summary>
	public System.Object Ifxtableifhcinbroadcastpkts { get { if (base.Columns.ContainsKey(9)) { return base.Columns[9]; } else { return null; } } set { if (base.Columns.ContainsKey(9)) { base.Columns[9] = value; } else { base.Columns.Add(9, value); } } }
	/// <summary>PID: 1111 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcoutoctets_1111 { get { if (base.Columns.ContainsKey(10)) { return base.Columns[10]; } else { return null; } } set { if (base.Columns.ContainsKey(10)) { base.Columns[10] = value; } else { base.Columns.Add(10, value); } } }
	/// <summary>PID: 1111 | Type: read</summary>
	public System.Object Ifxtableifhcoutoctets { get { if (base.Columns.ContainsKey(10)) { return base.Columns[10]; } else { return null; } } set { if (base.Columns.ContainsKey(10)) { base.Columns[10] = value; } else { base.Columns.Add(10, value); } } }
	/// <summary>PID: 1112 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcoutucastpkts_1112 { get { if (base.Columns.ContainsKey(11)) { return base.Columns[11]; } else { return null; } } set { if (base.Columns.ContainsKey(11)) { base.Columns[11] = value; } else { base.Columns.Add(11, value); } } }
	/// <summary>PID: 1112 | Type: read</summary>
	public System.Object Ifxtableifhcoutucastpkts { get { if (base.Columns.ContainsKey(11)) { return base.Columns[11]; } else { return null; } } set { if (base.Columns.ContainsKey(11)) { base.Columns[11] = value; } else { base.Columns.Add(11, value); } } }
	/// <summary>PID: 1113 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcoutmulticastpkts_1113 { get { if (base.Columns.ContainsKey(12)) { return base.Columns[12]; } else { return null; } } set { if (base.Columns.ContainsKey(12)) { base.Columns[12] = value; } else { base.Columns.Add(12, value); } } }
	/// <summary>PID: 1113 | Type: read</summary>
	public System.Object Ifxtableifhcoutmulticastpkts { get { if (base.Columns.ContainsKey(12)) { return base.Columns[12]; } else { return null; } } set { if (base.Columns.ContainsKey(12)) { base.Columns[12] = value; } else { base.Columns.Add(12, value); } } }
	/// <summary>PID: 1114 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhcoutbroadcastpkts_1114 { get { if (base.Columns.ContainsKey(13)) { return base.Columns[13]; } else { return null; } } set { if (base.Columns.ContainsKey(13)) { base.Columns[13] = value; } else { base.Columns.Add(13, value); } } }
	/// <summary>PID: 1114 | Type: read</summary>
	public System.Object Ifxtableifhcoutbroadcastpkts { get { if (base.Columns.ContainsKey(13)) { return base.Columns[13]; } else { return null; } } set { if (base.Columns.ContainsKey(13)) { base.Columns[13] = value; } else { base.Columns.Add(13, value); } } }
	/// <summary>PID: 1115 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableiflinkupdowntrapenable_1115 { get { if (base.Columns.ContainsKey(14)) { return base.Columns[14]; } else { return null; } } set { if (base.Columns.ContainsKey(14)) { base.Columns[14] = value; } else { base.Columns.Add(14, value); } } }
	/// <summary>PID: 1115 | Type: read</summary>
	public System.Object Ifxtableiflinkupdowntrapenable { get { if (base.Columns.ContainsKey(14)) { return base.Columns[14]; } else { return null; } } set { if (base.Columns.ContainsKey(14)) { base.Columns[14] = value; } else { base.Columns.Add(14, value); } } }
	/// <summary>PID: 1116 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifhighspeed_1116 { get { if (base.Columns.ContainsKey(15)) { return base.Columns[15]; } else { return null; } } set { if (base.Columns.ContainsKey(15)) { base.Columns[15] = value; } else { base.Columns.Add(15, value); } } }
	/// <summary>PID: 1116 | Type: read</summary>
	public System.Object Ifxtableifhighspeed { get { if (base.Columns.ContainsKey(15)) { return base.Columns[15]; } else { return null; } } set { if (base.Columns.ContainsKey(15)) { base.Columns[15] = value; } else { base.Columns.Add(15, value); } } }
	/// <summary>PID: 1117 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifpromiscuousmode_1117 { get { if (base.Columns.ContainsKey(16)) { return base.Columns[16]; } else { return null; } } set { if (base.Columns.ContainsKey(16)) { base.Columns[16] = value; } else { base.Columns.Add(16, value); } } }
	/// <summary>PID: 1117 | Type: read</summary>
	public System.Object Ifxtableifpromiscuousmode { get { if (base.Columns.ContainsKey(16)) { return base.Columns[16]; } else { return null; } } set { if (base.Columns.ContainsKey(16)) { base.Columns[16] = value; } else { base.Columns.Add(16, value); } } }
	/// <summary>PID: 1118 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifconnectorpresent_1118 { get { if (base.Columns.ContainsKey(17)) { return base.Columns[17]; } else { return null; } } set { if (base.Columns.ContainsKey(17)) { base.Columns[17] = value; } else { base.Columns.Add(17, value); } } }
	/// <summary>PID: 1118 | Type: read</summary>
	public System.Object Ifxtableifconnectorpresent { get { if (base.Columns.ContainsKey(17)) { return base.Columns[17]; } else { return null; } } set { if (base.Columns.ContainsKey(17)) { base.Columns[17] = value; } else { base.Columns.Add(17, value); } } }
	/// <summary>PID: 1119 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifalias_1119 { get { if (base.Columns.ContainsKey(18)) { return base.Columns[18]; } else { return null; } } set { if (base.Columns.ContainsKey(18)) { base.Columns[18] = value; } else { base.Columns.Add(18, value); } } }
	/// <summary>PID: 1119 | Type: read</summary>
	public System.Object Ifxtableifalias { get { if (base.Columns.ContainsKey(18)) { return base.Columns[18]; } else { return null; } } set { if (base.Columns.ContainsKey(18)) { base.Columns[18] = value; } else { base.Columns.Add(18, value); } } }
	/// <summary>PID: 1120 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifcounterdiscontinuitytime_1120 { get { if (base.Columns.ContainsKey(19)) { return base.Columns[19]; } else { return null; } } set { if (base.Columns.ContainsKey(19)) { base.Columns[19] = value; } else { base.Columns.Add(19, value); } } }
	/// <summary>PID: 1120 | Type: read</summary>
	public System.Object Ifxtableifcounterdiscontinuitytime { get { if (base.Columns.ContainsKey(19)) { return base.Columns[19]; } else { return null; } } set { if (base.Columns.ContainsKey(19)) { base.Columns[19] = value; } else { base.Columns.Add(19, value); } } }
	/// <summary>PID: 1121 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifinbitrate_1121 { get { if (base.Columns.ContainsKey(20)) { return base.Columns[20]; } else { return null; } } set { if (base.Columns.ContainsKey(20)) { base.Columns[20] = value; } else { base.Columns.Add(20, value); } } }
	/// <summary>PID: 1121 | Type: read</summary>
	public System.Object Ifxtableifinbitrate { get { if (base.Columns.ContainsKey(20)) { return base.Columns[20]; } else { return null; } } set { if (base.Columns.ContainsKey(20)) { base.Columns[20] = value; } else { base.Columns.Add(20, value); } } }
	/// <summary>PID: 1122 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifoutbitrate_1122 { get { if (base.Columns.ContainsKey(21)) { return base.Columns[21]; } else { return null; } } set { if (base.Columns.ContainsKey(21)) { base.Columns[21] = value; } else { base.Columns.Add(21, value); } } }
	/// <summary>PID: 1122 | Type: read</summary>
	public System.Object Ifxtableifoutbitrate { get { if (base.Columns.ContainsKey(21)) { return base.Columns[21]; } else { return null; } } set { if (base.Columns.ContainsKey(21)) { base.Columns[21] = value; } else { base.Columns.Add(21, value); } } }
	/// <summary>PID: 1123 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifbandwidthutilization_1123 { get { if (base.Columns.ContainsKey(22)) { return base.Columns[22]; } else { return null; } } set { if (base.Columns.ContainsKey(22)) { base.Columns[22] = value; } else { base.Columns.Add(22, value); } } }
	/// <summary>PID: 1123 | Type: read</summary>
	public System.Object Ifxtableifbandwidthutilization { get { if (base.Columns.ContainsKey(22)) { return base.Columns[22]; } else { return null; } } set { if (base.Columns.ContainsKey(22)) { base.Columns[22] = value; } else { base.Columns.Add(22, value); } } }
	/// <summary>PID: 1124 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Ifxtableifratedata_1124 { get { if (base.Columns.ContainsKey(23)) { return base.Columns[23]; } else { return null; } } set { if (base.Columns.ContainsKey(23)) { base.Columns[23] = value; } else { base.Columns.Add(23, value); } } }
	/// <summary>PID: 1124 | Type: read</summary>
	public System.Object Ifxtableifratedata { get { if (base.Columns.ContainsKey(23)) { return base.Columns[23]; } else { return null; } } set { if (base.Columns.ContainsKey(23)) { base.Columns[23] = value; } else { base.Columns.Add(23, value); } } }
	public IfxtableQActionRow() : base(0, 24) { }
	public IfxtableQActionRow(System.Object[] oRow) : base(0, 24, oRow) { }
	public static implicit operator IfxtableQActionRow(System.Object[] source) { return new IfxtableQActionRow(source); }
	public static implicit operator System.Object[](IfxtableQActionRow source) { return source.ToObjectArray(); }
}
/// <summary>IDX: 0</summary>
public class InterfacesQActionRow : QActionTableRow
{
	/// <summary>PID: 1201 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesindex_1201 { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1201 | Type: read</summary>
	public System.Object Interfacesindex { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1202 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesdescr_1202 { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 1202 | Type: read</summary>
	public System.Object Interfacesdescr { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 1203 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacestype_1203 { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 1203 | Type: read</summary>
	public System.Object Interfacestype { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 1204 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesmtu_1204 { get { if (base.Columns.ContainsKey(3)) { return base.Columns[3]; } else { return null; } } set { if (base.Columns.ContainsKey(3)) { base.Columns[3] = value; } else { base.Columns.Add(3, value); } } }
	/// <summary>PID: 1204 | Type: read</summary>
	public System.Object Interfacesmtu { get { if (base.Columns.ContainsKey(3)) { return base.Columns[3]; } else { return null; } } set { if (base.Columns.ContainsKey(3)) { base.Columns[3] = value; } else { base.Columns.Add(3, value); } } }
	/// <summary>PID: 1205 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesspeed_1205 { get { if (base.Columns.ContainsKey(4)) { return base.Columns[4]; } else { return null; } } set { if (base.Columns.ContainsKey(4)) { base.Columns[4] = value; } else { base.Columns.Add(4, value); } } }
	/// <summary>PID: 1205 | Type: read</summary>
	public System.Object Interfacesspeed { get { if (base.Columns.ContainsKey(4)) { return base.Columns[4]; } else { return null; } } set { if (base.Columns.ContainsKey(4)) { base.Columns[4] = value; } else { base.Columns.Add(4, value); } } }
	/// <summary>PID: 1206 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesphysaddress_1206 { get { if (base.Columns.ContainsKey(5)) { return base.Columns[5]; } else { return null; } } set { if (base.Columns.ContainsKey(5)) { base.Columns[5] = value; } else { base.Columns.Add(5, value); } } }
	/// <summary>PID: 1206 | Type: read</summary>
	public System.Object Interfacesphysaddress { get { if (base.Columns.ContainsKey(5)) { return base.Columns[5]; } else { return null; } } set { if (base.Columns.ContainsKey(5)) { base.Columns[5] = value; } else { base.Columns.Add(5, value); } } }
	/// <summary>PID: 1207 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesadminstatus_1207 { get { if (base.Columns.ContainsKey(6)) { return base.Columns[6]; } else { return null; } } set { if (base.Columns.ContainsKey(6)) { base.Columns[6] = value; } else { base.Columns.Add(6, value); } } }
	/// <summary>PID: 1207 | Type: read</summary>
	public System.Object Interfacesadminstatus { get { if (base.Columns.ContainsKey(6)) { return base.Columns[6]; } else { return null; } } set { if (base.Columns.ContainsKey(6)) { base.Columns[6] = value; } else { base.Columns.Add(6, value); } } }
	/// <summary>PID: 1208 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesoperstatus_1208 { get { if (base.Columns.ContainsKey(7)) { return base.Columns[7]; } else { return null; } } set { if (base.Columns.ContainsKey(7)) { base.Columns[7] = value; } else { base.Columns.Add(7, value); } } }
	/// <summary>PID: 1208 | Type: read</summary>
	public System.Object Interfacesoperstatus { get { if (base.Columns.ContainsKey(7)) { return base.Columns[7]; } else { return null; } } set { if (base.Columns.ContainsKey(7)) { base.Columns[7] = value; } else { base.Columns.Add(7, value); } } }
	/// <summary>PID: 1209 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfaceslastchange_1209 { get { if (base.Columns.ContainsKey(8)) { return base.Columns[8]; } else { return null; } } set { if (base.Columns.ContainsKey(8)) { base.Columns[8] = value; } else { base.Columns.Add(8, value); } } }
	/// <summary>PID: 1209 | Type: read</summary>
	public System.Object Interfaceslastchange { get { if (base.Columns.ContainsKey(8)) { return base.Columns[8]; } else { return null; } } set { if (base.Columns.ContainsKey(8)) { base.Columns[8] = value; } else { base.Columns.Add(8, value); } } }
	/// <summary>PID: 1210 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesinoctets_1210 { get { if (base.Columns.ContainsKey(9)) { return base.Columns[9]; } else { return null; } } set { if (base.Columns.ContainsKey(9)) { base.Columns[9] = value; } else { base.Columns.Add(9, value); } } }
	/// <summary>PID: 1210 | Type: read</summary>
	public System.Object Interfacesinoctets { get { if (base.Columns.ContainsKey(9)) { return base.Columns[9]; } else { return null; } } set { if (base.Columns.ContainsKey(9)) { base.Columns[9] = value; } else { base.Columns.Add(9, value); } } }
	/// <summary>PID: 1211 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesinucastpkts_1211 { get { if (base.Columns.ContainsKey(10)) { return base.Columns[10]; } else { return null; } } set { if (base.Columns.ContainsKey(10)) { base.Columns[10] = value; } else { base.Columns.Add(10, value); } } }
	/// <summary>PID: 1211 | Type: read</summary>
	public System.Object Interfacesinucastpkts { get { if (base.Columns.ContainsKey(10)) { return base.Columns[10]; } else { return null; } } set { if (base.Columns.ContainsKey(10)) { base.Columns[10] = value; } else { base.Columns.Add(10, value); } } }
	/// <summary>PID: 1212 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesindiscards_1212 { get { if (base.Columns.ContainsKey(11)) { return base.Columns[11]; } else { return null; } } set { if (base.Columns.ContainsKey(11)) { base.Columns[11] = value; } else { base.Columns.Add(11, value); } } }
	/// <summary>PID: 1212 | Type: read</summary>
	public System.Object Interfacesindiscards { get { if (base.Columns.ContainsKey(11)) { return base.Columns[11]; } else { return null; } } set { if (base.Columns.ContainsKey(11)) { base.Columns[11] = value; } else { base.Columns.Add(11, value); } } }
	/// <summary>PID: 1213 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesinerrors_1213 { get { if (base.Columns.ContainsKey(12)) { return base.Columns[12]; } else { return null; } } set { if (base.Columns.ContainsKey(12)) { base.Columns[12] = value; } else { base.Columns.Add(12, value); } } }
	/// <summary>PID: 1213 | Type: read</summary>
	public System.Object Interfacesinerrors { get { if (base.Columns.ContainsKey(12)) { return base.Columns[12]; } else { return null; } } set { if (base.Columns.ContainsKey(12)) { base.Columns[12] = value; } else { base.Columns.Add(12, value); } } }
	/// <summary>PID: 1214 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesinunknownprotos_1214 { get { if (base.Columns.ContainsKey(13)) { return base.Columns[13]; } else { return null; } } set { if (base.Columns.ContainsKey(13)) { base.Columns[13] = value; } else { base.Columns.Add(13, value); } } }
	/// <summary>PID: 1214 | Type: read</summary>
	public System.Object Interfacesinunknownprotos { get { if (base.Columns.ContainsKey(13)) { return base.Columns[13]; } else { return null; } } set { if (base.Columns.ContainsKey(13)) { base.Columns[13] = value; } else { base.Columns.Add(13, value); } } }
	/// <summary>PID: 1215 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesoutoctets_1215 { get { if (base.Columns.ContainsKey(14)) { return base.Columns[14]; } else { return null; } } set { if (base.Columns.ContainsKey(14)) { base.Columns[14] = value; } else { base.Columns.Add(14, value); } } }
	/// <summary>PID: 1215 | Type: read</summary>
	public System.Object Interfacesoutoctets { get { if (base.Columns.ContainsKey(14)) { return base.Columns[14]; } else { return null; } } set { if (base.Columns.ContainsKey(14)) { base.Columns[14] = value; } else { base.Columns.Add(14, value); } } }
	/// <summary>PID: 1216 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesoutucastpkts_1216 { get { if (base.Columns.ContainsKey(15)) { return base.Columns[15]; } else { return null; } } set { if (base.Columns.ContainsKey(15)) { base.Columns[15] = value; } else { base.Columns.Add(15, value); } } }
	/// <summary>PID: 1216 | Type: read</summary>
	public System.Object Interfacesoutucastpkts { get { if (base.Columns.ContainsKey(15)) { return base.Columns[15]; } else { return null; } } set { if (base.Columns.ContainsKey(15)) { base.Columns[15] = value; } else { base.Columns.Add(15, value); } } }
	/// <summary>PID: 1217 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesoutdiscards_1217 { get { if (base.Columns.ContainsKey(16)) { return base.Columns[16]; } else { return null; } } set { if (base.Columns.ContainsKey(16)) { base.Columns[16] = value; } else { base.Columns.Add(16, value); } } }
	/// <summary>PID: 1217 | Type: read</summary>
	public System.Object Interfacesoutdiscards { get { if (base.Columns.ContainsKey(16)) { return base.Columns[16]; } else { return null; } } set { if (base.Columns.ContainsKey(16)) { base.Columns[16] = value; } else { base.Columns.Add(16, value); } } }
	/// <summary>PID: 1218 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesouterrors_1218 { get { if (base.Columns.ContainsKey(17)) { return base.Columns[17]; } else { return null; } } set { if (base.Columns.ContainsKey(17)) { base.Columns[17] = value; } else { base.Columns.Add(17, value); } } }
	/// <summary>PID: 1218 | Type: read</summary>
	public System.Object Interfacesouterrors { get { if (base.Columns.ContainsKey(17)) { return base.Columns[17]; } else { return null; } } set { if (base.Columns.ContainsKey(17)) { base.Columns[17] = value; } else { base.Columns.Add(17, value); } } }
	/// <summary>PID: 1219 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesinbitrate_1219 { get { if (base.Columns.ContainsKey(18)) { return base.Columns[18]; } else { return null; } } set { if (base.Columns.ContainsKey(18)) { base.Columns[18] = value; } else { base.Columns.Add(18, value); } } }
	/// <summary>PID: 1219 | Type: read</summary>
	public System.Object Interfacesinbitrate { get { if (base.Columns.ContainsKey(18)) { return base.Columns[18]; } else { return null; } } set { if (base.Columns.ContainsKey(18)) { base.Columns[18] = value; } else { base.Columns.Add(18, value); } } }
	/// <summary>PID: 1220 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesoutbitrate_1220 { get { if (base.Columns.ContainsKey(19)) { return base.Columns[19]; } else { return null; } } set { if (base.Columns.ContainsKey(19)) { base.Columns[19] = value; } else { base.Columns.Add(19, value); } } }
	/// <summary>PID: 1220 | Type: read</summary>
	public System.Object Interfacesoutbitrate { get { if (base.Columns.ContainsKey(19)) { return base.Columns[19]; } else { return null; } } set { if (base.Columns.ContainsKey(19)) { base.Columns[19] = value; } else { base.Columns.Add(19, value); } } }
	/// <summary>PID: 1221 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesinmulticastpkts_1221 { get { if (base.Columns.ContainsKey(20)) { return base.Columns[20]; } else { return null; } } set { if (base.Columns.ContainsKey(20)) { base.Columns[20] = value; } else { base.Columns.Add(20, value); } } }
	/// <summary>PID: 1221 | Type: read</summary>
	public System.Object Interfacesinmulticastpkts { get { if (base.Columns.ContainsKey(20)) { return base.Columns[20]; } else { return null; } } set { if (base.Columns.ContainsKey(20)) { base.Columns[20] = value; } else { base.Columns.Add(20, value); } } }
	/// <summary>PID: 1222 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesinbroadcastpkts_1222 { get { if (base.Columns.ContainsKey(21)) { return base.Columns[21]; } else { return null; } } set { if (base.Columns.ContainsKey(21)) { base.Columns[21] = value; } else { base.Columns.Add(21, value); } } }
	/// <summary>PID: 1222 | Type: read</summary>
	public System.Object Interfacesinbroadcastpkts { get { if (base.Columns.ContainsKey(21)) { return base.Columns[21]; } else { return null; } } set { if (base.Columns.ContainsKey(21)) { base.Columns[21] = value; } else { base.Columns.Add(21, value); } } }
	/// <summary>PID: 1223 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesoutmulticastpkts_1223 { get { if (base.Columns.ContainsKey(22)) { return base.Columns[22]; } else { return null; } } set { if (base.Columns.ContainsKey(22)) { base.Columns[22] = value; } else { base.Columns.Add(22, value); } } }
	/// <summary>PID: 1223 | Type: read</summary>
	public System.Object Interfacesoutmulticastpkts { get { if (base.Columns.ContainsKey(22)) { return base.Columns[22]; } else { return null; } } set { if (base.Columns.ContainsKey(22)) { base.Columns[22] = value; } else { base.Columns.Add(22, value); } } }
	/// <summary>PID: 1224 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesoutbroadcastpkts_1224 { get { if (base.Columns.ContainsKey(23)) { return base.Columns[23]; } else { return null; } } set { if (base.Columns.ContainsKey(23)) { base.Columns[23] = value; } else { base.Columns.Add(23, value); } } }
	/// <summary>PID: 1224 | Type: read</summary>
	public System.Object Interfacesoutbroadcastpkts { get { if (base.Columns.ContainsKey(23)) { return base.Columns[23]; } else { return null; } } set { if (base.Columns.ContainsKey(23)) { base.Columns[23] = value; } else { base.Columns.Add(23, value); } } }
	/// <summary>PID: 1225 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacespromiscuousmode_1225 { get { if (base.Columns.ContainsKey(24)) { return base.Columns[24]; } else { return null; } } set { if (base.Columns.ContainsKey(24)) { base.Columns[24] = value; } else { base.Columns.Add(24, value); } } }
	/// <summary>PID: 1225 | Type: read</summary>
	public System.Object Interfacespromiscuousmode { get { if (base.Columns.ContainsKey(24)) { return base.Columns[24]; } else { return null; } } set { if (base.Columns.ContainsKey(24)) { base.Columns[24] = value; } else { base.Columns.Add(24, value); } } }
	/// <summary>PID: 1226 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesphysicalconnector_1226 { get { if (base.Columns.ContainsKey(25)) { return base.Columns[25]; } else { return null; } } set { if (base.Columns.ContainsKey(25)) { base.Columns[25] = value; } else { base.Columns.Add(25, value); } } }
	/// <summary>PID: 1226 | Type: read</summary>
	public System.Object Interfacesphysicalconnector { get { if (base.Columns.ContainsKey(25)) { return base.Columns[25]; } else { return null; } } set { if (base.Columns.ContainsKey(25)) { base.Columns[25] = value; } else { base.Columns.Add(25, value); } } }
	/// <summary>PID: 1227 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesalias_1227 { get { if (base.Columns.ContainsKey(26)) { return base.Columns[26]; } else { return null; } } set { if (base.Columns.ContainsKey(26)) { base.Columns[26] = value; } else { base.Columns.Add(26, value); } } }
	/// <summary>PID: 1227 | Type: read</summary>
	public System.Object Interfacesalias { get { if (base.Columns.ContainsKey(26)) { return base.Columns[26]; } else { return null; } } set { if (base.Columns.ContainsKey(26)) { base.Columns[26] = value; } else { base.Columns.Add(26, value); } } }
	/// <summary>PID: 1228 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacescounterdiscontinuitytime_1228 { get { if (base.Columns.ContainsKey(27)) { return base.Columns[27]; } else { return null; } } set { if (base.Columns.ContainsKey(27)) { base.Columns[27] = value; } else { base.Columns.Add(27, value); } } }
	/// <summary>PID: 1228 | Type: read</summary>
	public System.Object Interfacescounterdiscontinuitytime { get { if (base.Columns.ContainsKey(27)) { return base.Columns[27]; } else { return null; } } set { if (base.Columns.ContainsKey(27)) { base.Columns[27] = value; } else { base.Columns.Add(27, value); } } }
	/// <summary>PID: 1229 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfaceslinkupdowntrapenable_1229 { get { if (base.Columns.ContainsKey(28)) { return base.Columns[28]; } else { return null; } } set { if (base.Columns.ContainsKey(28)) { base.Columns[28] = value; } else { base.Columns.Add(28, value); } } }
	/// <summary>PID: 1229 | Type: read</summary>
	public System.Object Interfaceslinkupdowntrapenable { get { if (base.Columns.ContainsKey(28)) { return base.Columns[28]; } else { return null; } } set { if (base.Columns.ContainsKey(28)) { base.Columns[28] = value; } else { base.Columns.Add(28, value); } } }
	/// <summary>PID: 1230 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesbandwidthutilization_1230 { get { if (base.Columns.ContainsKey(29)) { return base.Columns[29]; } else { return null; } } set { if (base.Columns.ContainsKey(29)) { base.Columns[29] = value; } else { base.Columns.Add(29, value); } } }
	/// <summary>PID: 1230 | Type: read</summary>
	public System.Object Interfacesbandwidthutilization { get { if (base.Columns.ContainsKey(29)) { return base.Columns[29]; } else { return null; } } set { if (base.Columns.ContainsKey(29)) { base.Columns[29] = value; } else { base.Columns.Add(29, value); } } }
	/// <summary>PID: 1231 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesduplexstatus_1231 { get { if (base.Columns.ContainsKey(30)) { return base.Columns[30]; } else { return null; } } set { if (base.Columns.ContainsKey(30)) { base.Columns[30] = value; } else { base.Columns.Add(30, value); } } }
	/// <summary>PID: 1231 | Type: read</summary>
	public System.Object Interfacesduplexstatus { get { if (base.Columns.ContainsKey(30)) { return base.Columns[30]; } else { return null; } } set { if (base.Columns.ContainsKey(30)) { base.Columns[30] = value; } else { base.Columns.Add(30, value); } } }
	/// <summary>PID: 1199 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Interfacesdisplaykey_1199 { get { if (base.Columns.ContainsKey(31)) { return base.Columns[31]; } else { return null; } } set { if (base.Columns.ContainsKey(31)) { base.Columns[31] = value; } else { base.Columns.Add(31, value); } } }
	/// <summary>PID: 1199 | Type: read</summary>
	public System.Object Interfacesdisplaykey { get { if (base.Columns.ContainsKey(31)) { return base.Columns[31]; } else { return null; } } set { if (base.Columns.ContainsKey(31)) { base.Columns[31] = value; } else { base.Columns.Add(31, value); } } }
	public InterfacesQActionRow() : base(0, 32) { }
	public InterfacesQActionRow(System.Object[] oRow) : base(0, 32, oRow) { }
	public static implicit operator InterfacesQActionRow(System.Object[] source) { return new InterfacesQActionRow(source); }
	public static implicit operator System.Object[](InterfacesQActionRow source) { return source.ToObjectArray(); }
}
/// <summary>IDX: 0</summary>
public class Dot3statstableQActionRow : QActionTableRow
{
	/// <summary>PID: 1301 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Dot3statsindex_1301 { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1301 | Type: read</summary>
	public System.Object Dot3statsindex { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 1302 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Dot3statsduplexstatus_1302 { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 1302 | Type: read</summary>
	public System.Object Dot3statsduplexstatus { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	public Dot3statstableQActionRow() : base(0, 2) { }
	public Dot3statstableQActionRow(System.Object[] oRow) : base(0, 2, oRow) { }
	public static implicit operator Dot3statstableQActionRow(System.Object[] source) { return new Dot3statstableQActionRow(source); }
	public static implicit operator System.Object[](Dot3statstableQActionRow source) { return source.ToObjectArray(); }
}
}
